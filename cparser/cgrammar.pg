// C Grammar taken from: http://www.cs.man.ac.uk/~pjj/bnf/c_syntax.bnf

translation_unit            : external_decls=external_decl+
                            ;

external_decl               : function=function_definition
                            | declaration=decl
                            | ld=line_directive
                            ;

line_directive              : "#" int_const string line_directive_int?
                            ;

line_directive_int          : int_const
                            | line_directive_int int_const
                            ;

function_definition         : decl_specs=decl_specs declarator=declarator decl_list=decl_list body=compound_stat
                            | declarator=declarator decl_list=decl_list body=compound_stat
                            | decl_specs=decl_specs declarator=declarator body=compound_stat
                            | declarator=declarator body=compound_stat
                            ;

decl                        : decl_body ';'
                            ;

decl_body                   : specs=decl_specs init_decl_list=init_declarator_list?
                            ;

decl_list                   : decl+
                            ;

decl_specs                  : (
                                storage_spec=storage_class_spec
                              | type_spec=type_spec
                              | type_qual=type_qualifier
                              )+
                            ;

storage_class_spec          : 'auto' | 'register' | 'static' | 'extern' | 'typedef'
                            ;


type_spec                   : 'void' | 'char' | 'short' | 'int' | 'long' | 'float'
                            | 'double' | 'signed' | 'unsigned'
                            | '_Bool' // _Bool is built-in type in C99
                            | '_Complex' // _Complex is built-in type in C99
                            | struct_or_union_spec
                            | enum_spec
                            | typedef_name
                            ;

type_qualifier              : 'const' | 'volatile'
                            ;

struct_or_union_spec        : struct_type=struct_or_union id=id '{' fields=struct_decl+ '}'
                            | struct_type=struct_or_union '{' fields=struct_decl+ '}'
                            | struct_type=struct_or_union id=id
                            ;


struct_or_union             : 'struct' | 'union' | 'class'  // added class so that class forward declaration can be parsed
                            ;

init_declarator_list        : init_declarator+[comma]
                            ;

init_declarator             : decl=declarator
                            | decl=declarator '=' init=initializer
                            ;

struct_decl                 : spec_qualifier_list struct_declarator+[comma] ';'
                            | line_directive
                            ;

spec_qualifier_list         : type_spec spec_qualifier_list
                            | type_spec
                            | type_qualifier spec_qualifier_list
                            | type_qualifier
                            ;

struct_declarator           : declarator
                            | declarator ':' const_exp
                            | ':' const_exp
                            ;

enum_spec                   : 'enum' name=id '{' fields=enumerator+[comma] comma? '}'
                            | 'enum' '{' fields=enumerator+[comma] comma?'}'
                            | 'enum' name=id
                            ;

enumerator                  : id
                            | id '=' const_exp
                            ;

declarator                  : pointer? dd=direct_declarator
                            ;

direct_declarator           : name=id
                            | '(' declarator ')'
                            | array=direct_declarator '[' const_exp ']'
                            | array=direct_declarator '['     ']'
                            | fnc_decl=direct_declarator '(' param_type_list ')'
                            | fnc_decl=direct_declarator '(' id+[comma] ')'
                            | fnc_decl=direct_declarator '('     ')'
                            ;

pointer                     : '*' type_qualifier* pointer?
                            ;


param_type_list             : param_decl+[comma] (comma ellipsis)?
                            ;

param_decl                  : decl_specs (declarator | abstract_declarator)?
                            ;

initializer                 : assignment_exp
                            | '{' initializer_list comma? '}'
                            ;

initializer_list            : line_directive? initializer
                            | initializer_list comma line_directive? initializer
                            ;

type_name                   : spec_qualifier_list abstract_declarator
                            | spec_qualifier_list
                            ;

abstract_declarator         : pointer
                            | pointer direct_abstract_declarator
                            | direct_abstract_declarator
                            ;

direct_abstract_declarator  : '(' abstract_declarator ')'
                            | direct_abstract_declarator '[' const_exp ']'
                            | '[' const_exp ']'
                            | direct_abstract_declarator '[' ']'
                            | '[' ']'
                            | direct_abstract_declarator '(' param_type_list ')'
                            | '(' param_type_list ')'
                            | direct_abstract_declarator '('      ')'
                            | '('    ')'
                            ;

typedef_name                : id {dynamic};

stat                        : labeled_stat
                            | exp_stat
                            | compound_stat
                            | selection_stat
                            | iteration_stat
                            | jump_stat
                            | line_directive
                            ;

labeled_stat                : id ':' stat
                            | 'case' const_exp ':' stat
                            | 'default' ':' stat
                            ;

exp_stat                    : exp? ';'
                            ;

block_item                  : decl | stat
                            ;

//block_item_list             : block_item+
//                            ;

compound_stat               : '{' block_item* '}'
                            ;

//stat_list                   : stat
//                            | stat_list stat
//                            ;

selection_stat              : 'if' '(' exp ')' stat
                            | 'if' '(' exp ')' stat 'else' stat
                            | 'switch' '(' exp ')' stat
                            ;

iteration_stat              : 'while' '(' exp ')' stat
                            | 'do' stat 'while' '(' exp ')' ';'
                            | 'for' '(' exp? ';' exp? ';' exp? ')' stat
                            | 'for' '(' decl_body exp?';' exp? ';' exp? ')' stat {dynamic}
                            ;

jump_stat                   : 'goto' id ';'
                            | 'continue' ';'
                            | 'break' ';'
                            | 'return' exp ';'
                            | 'return' ';'
                            ;

exp                         : assignment_exp
                            | exp comma assignment_exp
                            ;

assignment_exp              : conditional_exp
                            | unary_exp assignment_operator assignment_exp
                            ;

assignment_operator         : '=' | '*=' | '/=' | '%=' | '+=' | '-=' | '<<='
                            | '>>=' | '&=' | '^=' | '|='
                            ;

conditional_exp             : logical_or_exp
                            | logical_or_exp '?' exp ':' conditional_exp
                            ;

const_exp                   : conditional_exp
                            ;

logical_or_exp              : logical_and_exp
                            | logical_or_exp '||' logical_and_exp
                            ;

logical_and_exp             : inclusive_or_exp
                            | logical_and_exp '&&' inclusive_or_exp
                            ;

inclusive_or_exp            : exclusive_or_exp
                            | inclusive_or_exp '|' exclusive_or_exp
                            ;

exclusive_or_exp            : and_exp
                            | exclusive_or_exp '^' and_exp
                            ;

and_exp                     : equality_exp
                            | and_exp '&' equality_exp
                            ;

equality_exp                : relational_exp
                            | equality_exp '==' relational_exp
                            | equality_exp '!=' relational_exp
                            ;

relational_exp              : shift_expression
                            | relational_exp '<' shift_expression
                            | relational_exp '>' shift_expression
                            | relational_exp '<=' shift_expression
                            | relational_exp '>=' shift_expression
                            ;

shift_expression            : additive_exp
                            | shift_expression '<<' additive_exp
                            | shift_expression '>>' additive_exp
                            ;

additive_exp                : mult_exp
                            | additive_exp '+' mult_exp
                            | additive_exp '-' mult_exp
                            ;

mult_exp                    : cast_exp
                            | mult_exp '*' cast_exp
                            | mult_exp '/' cast_exp
                            | mult_exp '%' cast_exp
                            ;


cast_exp                    : unary_exp
                            | '(' type_name ')' cast_exp
                            ;


unary_exp                   : postfix_exp
                            | '++' unary_exp
                            | '--' unary_exp
                            | unary_operator cast_exp
                            | 'sizeof' unary_exp
                            | 'sizeof' '(' type_name ')'
                            // support for new operator from C++
                            | 'new' type_name '(' ')'
                            | 'new' type_name '(' exp ')'
                            ;

unary_operator              : '&' | '*' | '+' | '-' | '~' | '!'
                            ;

postfix_exp                 : primary_exp
                            | postfix_exp '[' exp ']' // array subscript
                            | postfix_exp '(' assignment_exp*[comma] ')'
                            | postfix_exp dot id
                            | postfix_exp '->' id
                            | postfix_exp '++'
                            | postfix_exp '--'
                            ;

primary_exp                 : var_ref=id {dynamic}
                            | cconst
                            | adj_strings
                            | '(' exp ')'
                            ;

cconst                      : int_const
                            | char_const
                            | float_const
                            | hexadecimal
                         // | enumeration_const
                            ;

adj_strings                 : string+;

hexadecimal                 : hex_const integer_suffix_opt?
                            ;


//
// Not part of the original grammar
//

terminals
integer_suffix_opt: /(([uU]ll)|([uU]LL)|(ll[uU]?)|(LL[uU]?)|([uU][lL])|([lL][uU]?)|[uU])?/;
int_const: /[-+]?[0-9]+[uUlL]{0,2}\b/ {prefer};
float_const: /[+-]?(\d+(\.\d*)?|\.\d+)([eE][+-]?\d+)?[FfLl]?(?<=[\w\.])(?![\w\.])/;
char_const: /'([^'\\\n]|(\\(([a-zA-Z._~!=&\^\-\\?'"])|(\d+)|(x[0-9a-fA-F]+))))'/;
hex_const: /0[xX][0-9a-fA-F]+/;
ellipsis: '...';
dot: '.';
comma: ',';

string: /"([^"\\\n]|(\\(([a-zA-Z._~!=&\^\-\\?'"])|(\d+)|(x[0-9a-fA-F]+))))*"/;
id: /[_a-zA-Z][_a-zA-Z0-9]*/;
KEYWORD: /\w+/;
