// C Grammar taken from: http://www.cs.man.ac.uk/~pjj/bnf/c_syntax.bnf

translation_unit            : external_decl
                            | translation_unit external_decl
                            ;

external_decl               : function_definition
                            | decl
                            | line_directive
                            ;

line_directive              : "#" int_const string
                            | "#" int_const string line_directive_int
                            ;

line_directive_int          : int_const
                            | line_directive int_const
                            ;

function_definition         : decl_specs declarator decl_list compound_stat
                            | declarator decl_list compound_stat
                            | decl_specs declarator compound_stat
                            | declarator compound_stat
                            ;

decl                        : decl_body ';'
                            ;

decl_body                   : decl_specs init_declarator_list?
                            ;

decl_list                   : decl
                            | decl_list decl
                            ;

decl_specs                  : storage_class_spec decl_specs {dynamic}
                            | storage_class_spec {dynamic}
                            | type_spec decl_specs {dynamic}
                            | type_spec {dynamic}
                            | type_qualifier decl_specs
                            | type_qualifier
                            ;

storage_class_spec          : 'auto' | 'register' | 'static' | 'extern' | 'typedef'
                            ;


type_spec                   : 'void' | 'char' | 'short' | 'int' | 'long' | 'float'
                            | 'double' | 'signed' | 'unsigned'
                            | '_Bool' // _Bool is built-in type in C99
                            | struct_or_union_spec
                            | enum_spec
                            | typedef_name
                            ;

type_qualifier              : 'const' | 'volatile'
                            ;

struct_or_union_spec        : struct_or_union id '{' struct_decl_list '}'
                            | struct_or_union '{' struct_decl_list '}'
                            | struct_or_union id
                            ;

struct_or_union             : 'struct' | 'union'
                            ;

struct_decl_list            : struct_decl
                            | struct_decl_list struct_decl
                            ;

init_declarator_list        : init_declarator+[comma]
                            ;

init_declarator             : declarator
                            | declarator '=' initializer
                            ;

struct_decl                 : spec_qualifier_list struct_declarator_list ';'
                            | line_directive
                            ;

spec_qualifier_list         : type_spec spec_qualifier_list
                            | type_spec
                            | type_qualifier spec_qualifier_list
                            | type_qualifier
                            ;

struct_declarator_list      : struct_declarator
                            | struct_declarator_list comma struct_declarator
                            ;

struct_declarator           : declarator
                            | declarator ':' const_exp
                            | ':' const_exp
                            ;

enum_spec                   : 'enum' id '{' enumerator_list '}'
                            | 'enum' '{' enumerator_list '}'
                            | 'enum' id
                            ;

enumerator_list             : enumerator
                            | enumerator_list comma
                            | enumerator_list comma enumerator
                            ;

enumerator                  : id
                            | id '=' const_exp
                            ;

declarator                  : pointer direct_declarator
                            | direct_declarator
                            ;

direct_declarator           : id
                            | '(' declarator ')'
                            | direct_declarator '[' const_exp ']'
                            | direct_declarator '['     ']'
                            | direct_declarator '(' param_type_list ')'
                            | direct_declarator '(' id_list ')'
                            | direct_declarator '('     ')'
                            ;

pointer                     : '*' type_qualifier_list
                            | '*'
                            | '*' type_qualifier_list pointer
                            | '*' pointer
                            ;

type_qualifier_list         : type_qualifier
                            | type_qualifier_list type_qualifier
                            ;

param_type_list             : param_list
                            | param_list comma ellipsis
                            ;

param_list                  : param_decl
                            | param_list comma param_decl
                            ;

param_decl                  : decl_specs declarator
                            | decl_specs abstract_declarator
                            | decl_specs
                            ;

id_list                     : id
                            | id_list comma id
                            ;

initializer                 : assignment_exp
                            | '{' initializer_list '}'
                            | '{' initializer_list comma '}'
                            ;

initializer_list            : line_directive? initializer
                            | initializer_list comma line_directive? initializer
                            ;

type_name                   : spec_qualifier_list abstract_declarator
                            | spec_qualifier_list
                            ;

abstract_declarator         : pointer
                            | pointer direct_abstract_declarator
                            | direct_abstract_declarator
                            ;

direct_abstract_declarator  : '(' abstract_declarator ')'
                            | direct_abstract_declarator '[' const_exp ']'
                            | '[' const_exp ']'
                            | direct_abstract_declarator '[' ']'
                            | '[' ']'
                            | direct_abstract_declarator '(' param_type_list ')'
                            | '(' param_type_list ')'
                            | direct_abstract_declarator '('      ')'
                            | '('    ')'
                            ;

typedef_name                : id {dynamic};

stat                        : labeled_stat
                            | exp_stat
                            | compound_stat
                            | selection_stat
                            | iteration_stat
                            | jump_stat
                            | line_directive
                            ;

labeled_stat                : id ':' stat
                            | 'case' const_exp ':' stat
                            | 'default' ':' stat
                            ;

exp_stat                    : exp? ';'
                            ;

block_item                  : decl | stat
                            ;

block_item_list             : block_item+
                            ;

compound_stat               : '{' block_item_list? '}'
                            ;

stat_list                   : stat
                            | stat_list stat
                            ;

selection_stat              : 'if' '(' exp ')' stat
                            | 'if' '(' exp ')' stat 'else' stat
                            | 'switch' '(' exp ')' stat
                            ;

iteration_stat              : 'while' '(' exp ')' stat
                            | 'do' stat 'while' '(' exp ')' ';'
                            | 'for' '(' exp? ';' exp? ';' exp? ')' stat
                            | 'for' '(' decl_body exp?';' exp? ';' exp? ')' stat {dynamic}
                            ;

jump_stat                   : 'goto' id ';'
                            | 'continue' ';'
                            | 'break' ';'
                            | 'return' exp ';'
                            | 'return' ';'
                            ;

exp                         : assignment_exp
                            | exp comma assignment_exp
                            ;

assignment_exp              : conditional_exp
                            | unary_exp assignment_operator assignment_exp
                            ;

assignment_operator         : '=' | '*=' | '/=' | '%=' | '+=' | '-=' | '<<='
                            | '>>=' | '&=' | '^=' | '|='
                            ;

conditional_exp             : logical_or_exp
                            | logical_or_exp '?' exp ':' conditional_exp
                            ;

const_exp                   : conditional_exp
                            ;

logical_or_exp              : logical_and_exp
                            | logical_or_exp '||' logical_and_exp
                            ;

logical_and_exp             : inclusive_or_exp
                            | logical_and_exp '&&' inclusive_or_exp
                            ;

inclusive_or_exp            : exclusive_or_exp
                            | inclusive_or_exp '|' exclusive_or_exp
                            ;

exclusive_or_exp            : and_exp
                            | exclusive_or_exp '^' and_exp
                            ;

and_exp                     : equality_exp
                            | and_exp '&' equality_exp
                            ;

equality_exp                : relational_exp
                            | equality_exp '==' relational_exp
                            | equality_exp '!=' relational_exp
                            ;

relational_exp              : shift_expression
                            | relational_exp '<' shift_expression
                            | relational_exp '>' shift_expression
                            | relational_exp '<=' shift_expression
                            | relational_exp '>=' shift_expression
                            ;

shift_expression            : additive_exp
                            | shift_expression '<<' additive_exp
                            | shift_expression '>>' additive_exp
                            ;

additive_exp                : mult_exp
                            | additive_exp '+' mult_exp
                            | additive_exp '-' mult_exp
                            ;

mult_exp                    : cast_exp
                            | mult_exp '*' cast_exp
                            | mult_exp '/' cast_exp
                            | mult_exp '%' cast_exp
                            ;


cast_exp                    : unary_exp
                            | '(' type_name ')' cast_exp
                            ;


unary_exp                   : postfix_exp
                            | '++' unary_exp
                            | '--' unary_exp
                            | unary_operator cast_exp
                            | 'sizeof' unary_exp
                            | 'sizeof' '(' type_name ')'
                            ;

unary_operator              : '&' | '*' | '+' | '-' | '~' | '!'
                            ;

postfix_exp                 : primary_exp
                            | postfix_exp '[' exp ']'
                            | postfix_exp '(' argument_exp_list ')'
                            | postfix_exp '('       ')'
                            | postfix_exp dot id
                            | postfix_exp '->' id
                            | postfix_exp '++'
                            | postfix_exp '--'
                            ;

primary_exp                 : id {dynamic}
                            | cconst
                            | adj_strings
                            | '(' exp ')'
                            ;

argument_exp_list           : assignment_exp
                            | argument_exp_list comma assignment_exp
                            ;


cconst                      : int_const
                            | char_const
                            | float_const
                            | hexadecimal
                         // | enumeration_const
                            ;

adj_strings                 : string+;

hexadecimal                 : hex_const integer_suffix_opt?
                            ;


//
// Not part of the original grammar
//

terminals
integer_suffix_opt: /(([uU]ll)|([uU]LL)|(ll[uU]?)|(LL[uU]?)|([uU][lL])|([lL][uU]?)|[uU])?/;
int_const: /[-+]?[0-9]+[uUlL]{0,2}\b/ {prefer};
float_const: /[+-]?(\d+(\.\d*)?|\.\d+)([eE][+-]?\d+)?[FfLl]?(?<=[\w\.])(?![\w\.])/;
char_const: /'([^'\\\n]|(\\(([a-zA-Z._~!=&\^\-\\?'"])|(\d+)|(x[0-9a-fA-F]+))))'/;
hex_const: /0[xX][0-9a-fA-F]+/;
ellipsis: '...';
dot: '.';
comma: ',';

string: /"([^"\\\n]|(\\(([a-zA-Z._~!=&\^\-\\?'"])|(\d+)|(x[0-9a-fA-F]+))))*"/;
id: /[_a-zA-Z][_a-zA-Z0-9]*/;
KEYWORD: /\w+/;
