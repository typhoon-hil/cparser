translation_unit[5->257]
  external_decl_1[5->257]
    external_decl_1[5->140]
      external_decl_1[5->122]
        external_decl_1[5->104]
          external_decl_1[5->87]
            external_decl_1[5->52]
              external_decl_1[5->27]
                external_decl[5->27]
                  decl[5->27]
                    decl_body[5->26]
                      decl_specs[5->26]
                        decl_specs_g1_1[5->26]
                          decl_specs_g1_1[5->19]
                            decl_specs_g1_1[5->12]
                              decl_specs_g1[5->12]
                                storage_class_spec[5->12]
                                  typedef[5->12, "typedef"]
                            decl_specs_g1[13->19]
                              type_spec[13->19]
                                double[13->19, "double"]
                          decl_specs_g1[20->26]
                            type_spec[20->26]
                              typedef_name[20->26]
                                id[20->26, "real_T"]
                      init_declarator_list_opt[26->26]
                    ;[26->27, ";"]
              external_decl[32->52]
                decl[32->52]
                  decl_body[32->51]
                    decl_specs[32->51]
                      decl_specs_g1_1[32->51]
                        decl_specs_g1_1[32->43]
                          decl_specs_g1_1[32->39]
                            decl_specs_g1[32->39]
                              storage_class_spec[32->39]
                                typedef[32->39, "typedef"]
                          decl_specs_g1[40->43]
                            type_spec[40->43]
                              int[40->43, "int"]
                        decl_specs_g1[44->51]
                          type_spec[44->51]
                            typedef_name[44->51]
                              id[44->51, "int32_T"]
                    init_declarator_list_opt[51->51]
                  ;[51->52, ";"]
            external_decl[57->87]
              decl[57->87]
                decl_body[57->86]
                  decl_specs[57->86]
                    decl_specs_g1_1[57->86]
                      decl_specs_g1_1[57->77]
                        decl_specs_g1_1[57->73]
                          decl_specs_g1_1[57->64]
                            decl_specs_g1[57->64]
                              storage_class_spec[57->64]
                                typedef[57->64, "typedef"]
                          decl_specs_g1[65->73]
                            type_spec[65->73]
                              unsigned[65->73, "unsigned"]
                        decl_specs_g1[74->77]
                          type_spec[74->77]
                            int[74->77, "int"]
                      decl_specs_g1[78->86]
                        type_spec[78->86]
                          typedef_name[78->86]
                            id[78->86, "uint32_T"]
                  init_declarator_list_opt[86->86]
                ;[86->87, ";"]
          external_decl[93->104]
            decl[93->104]
              decl_body[93->103]
                decl_specs[93->99]
                  decl_specs_g1_1[93->99]
                    decl_specs_g1[93->99]
                      type_spec[93->99]
                        typedef_name[93->99]
                          id[93->99, "real_T"]
                init_declarator_list_opt[100->103]
                  init_declarator_list[100->103]
                    init_declarator_1_comma[100->103]
                      init_declarator[100->103]
                        declarator[100->103]
                          pointer_opt[100->100]
                          direct_declarator[100->103]
                            id[100->103, "y_0"]
              ;[103->104, ";"]
        external_decl[109->122]
          decl[109->122]
            decl_body[109->121]
              decl_specs[109->116]
                decl_specs_g1_1[109->116]
                  decl_specs_g1[109->116]
                    type_spec[109->116]
                      typedef_name[109->116]
                        id[109->116, "int32_T"]
              init_declarator_list_opt[117->121]
                init_declarator_list[117->121]
                  init_declarator_1_comma[117->121]
                    init_declarator[117->121]
                      declarator[117->121]
                        pointer_opt[117->117]
                        direct_declarator[117->121]
                          id[117->121, "icng"]
            ;[121->122, ";"]
      external_decl[127->140]
        decl[127->140]
          decl_body[127->139]
            decl_specs[127->135]
              decl_specs_g1_1[127->135]
                decl_specs_g1[127->135]
                  type_spec[127->135]
                    typedef_name[127->135]
                      id[127->135, "uint32_T"]
            init_declarator_list_opt[136->139]
              init_declarator_list[136->139]
                init_declarator_1_comma[136->139]
                  init_declarator[136->139]
                    declarator[136->139]
                      pointer_opt[136->136]
                      direct_declarator[136->139]
                        id[136->139, "jsr"]
          ;[139->140, ";"]
    external_decl[146->257]
      function_definition[146->257]
        decl_specs[146->149]
          decl_specs_g1_1[146->149]
            decl_specs_g1[146->149]
              type_spec[146->149]
                int[146->149, "int"]
        declarator[150->156]
          pointer_opt[150->150]
          direct_declarator[150->156]
            direct_declarator[150->154]
              id[150->154, "main"]
            ([154->155, "("]
            )[155->156, ")"]
        compound_stat[156->257]
          {[156->157, "{"]
          block_item_0[166->250]
            block_item_1[166->250]
              block_item_1[166->232]
                block_item[166->232]
                  stat[166->232]
                    exp_stat[166->232]
                      exp_opt[166->231]
                        exp[166->231]
                          assignment_exp[166->231]
                            unary_exp[166->169]
                              postfix_exp[166->169]
                                primary_exp[166->169]
                                  id[166->169, "y_0"]
                            assignment_operator[170->171]
                              =[170->171, "="]
                            assignment_exp[172->231]
                              conditional_exp[172->231]
                                logical_or_exp[172->231]
                                  logical_and_exp[172->231]
                                    inclusive_or_exp[172->231]
                                      exclusive_or_exp[172->231]
                                        and_exp[172->231]
                                          equality_exp[172->231]
                                            relational_exp[172->231]
                                              shift_expression[172->231]
                                                additive_exp[172->231]
                                                  additive_exp[172->225]
                                                    mult_exp[172->225]
                                                      mult_exp[172->201]
                                                        cast_exp[172->201]
                                                          ([172->173, "("]
                                                          type_name[173->179]
                                                            spec_qualifier_list[173->179]
                                                              type_spec[173->179]
                                                                typedef_name[173->179]
                                                                  id[173->179, "real_T"]
                                                          )[179->180, ")"]
                                                          cast_exp[180->201]
                                                            ([180->181, "("]
                                                            type_name[181->188]
                                                              spec_qualifier_list[181->188]
                                                                type_spec[181->188]
                                                                  typedef_name[181->188]
                                                                    id[181->188, "int32_T"]
                                                            )[188->189, ")"]
                                                            cast_exp[189->201]
                                                              unary_exp[189->201]
                                                                postfix_exp[189->201]
                                                                  primary_exp[189->201]
                                                                    ([189->190, "("]
                                                                    exp[190->200]
                                                                      assignment_exp[190->200]
                                                                        conditional_exp[190->200]
                                                                          logical_or_exp[190->200]
                                                                            logical_and_exp[190->200]
                                                                              inclusive_or_exp[190->200]
                                                                                exclusive_or_exp[190->200]
                                                                                  and_exp[190->200]
                                                                                    equality_exp[190->200]
                                                                                      relational_exp[190->200]
                                                                                        shift_expression[190->200]
                                                                                          additive_exp[190->200]
                                                                                            additive_exp[190->194]
                                                                                              mult_exp[190->194]
                                                                                                cast_exp[190->194]
                                                                                                  unary_exp[190->194]
                                                                                                    postfix_exp[190->194]
                                                                                                      primary_exp[190->194]
                                                                                                        id[190->194, "icng"]
                                                                                            +[195->196, "+"]
                                                                                            mult_exp[197->200]
                                                                                              cast_exp[197->200]
                                                                                                unary_exp[197->200]
                                                                                                  postfix_exp[197->200]
                                                                                                    primary_exp[197->200]
                                                                                                      id[197->200, "jsr"]
                                                                    )[200->201, ")"]
                                                      *[202->203, "*"]
                                                      cast_exp[204->225]
                                                        unary_exp[204->225]
                                                          postfix_exp[204->225]
                                                            primary_exp[204->225]
                                                              cconst[204->225]
                                                                float_const[204->225, "2.328306436538696E-10"]
                                                  +[226->227, "+"]
                                                  mult_exp[228->231]
                                                    cast_exp[228->231]
                                                      unary_exp[228->231]
                                                        postfix_exp[228->231]
                                                          primary_exp[228->231]
                                                            cconst[228->231]
                                                              float_const[228->231, "0.5"]
                      ;[231->232, ";"]
              block_item[241->250]
                stat[241->250]
                  jump_stat[241->250]
                    return[241->247, "return"]
                    exp[248->249]
                      assignment_exp[248->249]
                        conditional_exp[248->249]
                          logical_or_exp[248->249]
                            logical_and_exp[248->249]
                              inclusive_or_exp[248->249]
                                exclusive_or_exp[248->249]
                                  and_exp[248->249]
                                    equality_exp[248->249]
                                      relational_exp[248->249]
                                        shift_expression[248->249]
                                          additive_exp[248->249]
                                            mult_exp[248->249]
                                              cast_exp[248->249]
                                                unary_exp[248->249]
                                                  postfix_exp[248->249]
                                                    primary_exp[248->249]
                                                      cconst[248->249]
                                                        int_const[248->249, "0"]
                    ;[249->250, ";"]
          }[256->257, "}"]