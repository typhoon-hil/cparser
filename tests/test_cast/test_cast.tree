translation_unit[5->197]
  external_decl_1[5->197]
    external_decl_1[5->116]
      external_decl_1[5->98]
        external_decl_1[5->80]
          external_decl_1[5->60]
            external_decl_1[5->25]
              external_decl[5->25]
                decl[5->25]
                  decl_body[5->24]
                    decl_specs[5->24]
                      decl_specs_g1_1[5->24]
                        decl_specs_g1_1[5->16]
                          decl_specs_g1_1[5->12]
                            decl_specs_g1[5->12]
                              storage_class_spec[5->12]
                                typedef[5->12, "typedef"]
                          decl_specs_g1[13->16]
                            type_spec[13->16]
                              int[13->16, "int"]
                        decl_specs_g1[17->24]
                          type_spec[17->24]
                            typedef_name[17->24]
                              id[17->24, "int32_T"]
                    init_declarator_list_opt[24->24]
                  ;[24->25, ";"]
            external_decl[30->60]
              decl[30->60]
                decl_body[30->59]
                  decl_specs[30->59]
                    decl_specs_g1_1[30->59]
                      decl_specs_g1_1[30->50]
                        decl_specs_g1_1[30->46]
                          decl_specs_g1_1[30->37]
                            decl_specs_g1[30->37]
                              storage_class_spec[30->37]
                                typedef[30->37, "typedef"]
                          decl_specs_g1[38->46]
                            type_spec[38->46]
                              unsigned[38->46, "unsigned"]
                        decl_specs_g1[47->50]
                          type_spec[47->50]
                            int[47->50, "int"]
                      decl_specs_g1[51->59]
                        type_spec[51->59]
                          typedef_name[51->59]
                            id[51->59, "uint32_T"]
                  init_declarator_list_opt[59->59]
                ;[59->60, ";"]
          external_decl[70->80]
            decl[70->80]
              decl_body[70->79]
                decl_specs[70->77]
                  decl_specs_g1_1[70->77]
                    decl_specs_g1[70->77]
                      type_spec[70->77]
                        typedef_name[70->77]
                          id[70->77, "int32_T"]
                init_declarator_list_opt[78->79]
                  init_declarator_list[78->79]
                    init_declarator_1_comma[78->79]
                      init_declarator[78->79]
                        declarator[78->79]
                          pointer_opt[78->78]
                          direct_declarator[78->79]
                            id[78->79, "i"]
              ;[79->80, ";"]
        external_decl[85->98]
          decl[85->98]
            decl_body[85->97]
              decl_specs[85->92]
                decl_specs_g1_1[85->92]
                  decl_specs_g1[85->92]
                    type_spec[85->92]
                      typedef_name[85->92]
                        id[85->92, "int32_T"]
              init_declarator_list_opt[93->97]
                init_declarator_list[93->97]
                  init_declarator_1_comma[93->97]
                    init_declarator[93->97]
                      declarator[93->97]
                        pointer_opt[93->93]
                        direct_declarator[93->97]
                          id[93->97, "icng"]
            ;[97->98, ";"]
      external_decl[103->116]
        decl[103->116]
          decl_body[103->115]
            decl_specs[103->111]
              decl_specs_g1_1[103->111]
                decl_specs_g1[103->111]
                  type_spec[103->111]
                    typedef_name[103->111]
                      id[103->111, "uint32_T"]
            init_declarator_list_opt[112->115]
              init_declarator_list[112->115]
                init_declarator_1_comma[112->115]
                  init_declarator[112->115]
                    declarator[112->115]
                      pointer_opt[112->112]
                      direct_declarator[112->115]
                        id[112->115, "jsr"]
          ;[115->116, ";"]
    external_decl[126->197]
      function_definition[126->197]
        decl_specs[126->129]
          decl_specs_g1_1[126->129]
            decl_specs_g1[126->129]
              type_spec[126->129]
                int[126->129, "int"]
        declarator[130->136]
          pointer_opt[130->130]
          direct_declarator[130->136]
            direct_declarator[130->134]
              id[130->134, "main"]
            ([134->135, "("]
            )[135->136, ")"]
        compound_stat[136->197]
          {[136->137, "{"]
          block_item_0[146->190]
            block_item_1[146->190]
              block_item_1[146->172]
                block_item[146->172]
                  stat[146->172]
                    exp_stat[146->172]
                      exp_opt[146->171]
                        exp[146->171]
                          assignment_exp[146->171]
                            unary_exp[146->147]
                              postfix_exp[146->147]
                                primary_exp[146->147]
                                  id[146->147, "i"]
                            assignment_operator[148->149]
                              =[148->149, "="]
                            assignment_exp[150->171]
                              conditional_exp[150->171]
                                logical_or_exp[150->171]
                                  logical_and_exp[150->171]
                                    inclusive_or_exp[150->171]
                                      exclusive_or_exp[150->171]
                                        and_exp[150->171]
                                          equality_exp[150->171]
                                            relational_exp[150->171]
                                              shift_expression[150->171]
                                                additive_exp[150->171]
                                                  mult_exp[150->171]
                                                    cast_exp[150->171]
                                                      ([150->151, "("]
                                                      type_name[151->158]
                                                        spec_qualifier_list[151->158]
                                                          type_spec[151->158]
                                                            typedef_name[151->158]
                                                              id[151->158, "int32_T"]
                                                      )[158->159, ")"]
                                                      cast_exp[159->171]
                                                        unary_exp[159->171]
                                                          postfix_exp[159->171]
                                                            primary_exp[159->171]
                                                              ([159->160, "("]
                                                              exp[160->170]
                                                                assignment_exp[160->170]
                                                                  conditional_exp[160->170]
                                                                    logical_or_exp[160->170]
                                                                      logical_and_exp[160->170]
                                                                        inclusive_or_exp[160->170]
                                                                          exclusive_or_exp[160->170]
                                                                            and_exp[160->170]
                                                                              equality_exp[160->170]
                                                                                relational_exp[160->170]
                                                                                  shift_expression[160->170]
                                                                                    additive_exp[160->170]
                                                                                      additive_exp[160->164]
                                                                                        mult_exp[160->164]
                                                                                          cast_exp[160->164]
                                                                                            unary_exp[160->164]
                                                                                              postfix_exp[160->164]
                                                                                                primary_exp[160->164]
                                                                                                  id[160->164, "icng"]
                                                                                      +[165->166, "+"]
                                                                                      mult_exp[167->170]
                                                                                        cast_exp[167->170]
                                                                                          unary_exp[167->170]
                                                                                            postfix_exp[167->170]
                                                                                              primary_exp[167->170]
                                                                                                id[167->170, "jsr"]
                                                              )[170->171, ")"]
                      ;[171->172, ";"]
              block_item[181->190]
                stat[181->190]
                  jump_stat[181->190]
                    return[181->187, "return"]
                    exp[188->189]
                      assignment_exp[188->189]
                        conditional_exp[188->189]
                          logical_or_exp[188->189]
                            logical_and_exp[188->189]
                              inclusive_or_exp[188->189]
                                exclusive_or_exp[188->189]
                                  and_exp[188->189]
                                    equality_exp[188->189]
                                      relational_exp[188->189]
                                        shift_expression[188->189]
                                          additive_exp[188->189]
                                            mult_exp[188->189]
                                              cast_exp[188->189]
                                                unary_exp[188->189]
                                                  postfix_exp[188->189]
                                                    primary_exp[188->189]
                                                      cconst[188->189]
                                                        int_const[188->189, "0"]
                    ;[189->190, ";"]
          }[196->197, "}"]