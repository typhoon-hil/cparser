translation_unit[0->495]
  external_decl_1[0->495]
    external_decl_1[0->101]
      external_decl_1[0->90]
        external_decl_1[0->77]
          external_decl_1[0->57]
            external_decl[0->57]
              decl[0->57]
                decl_body[0->56]
                  decl_specs[0->56]
                    decl_specs_g1_1[0->56]
                      decl_specs_g1_1[0->51]
                        decl_specs_g1_1[0->7]
                          decl_specs_g1[0->7]
                            storage_class_spec[0->7]
                              typedef[0->7, "typedef"]
                        decl_specs_g1[8->51]
                          type_spec[8->51]
                            struct_or_union_spec[8->51]
                              struct_or_union[8->14]
                                struct[8->14, "struct"]
                              {[15->16, "{"]
                              struct_decl_1[21->49]
                                struct_decl_1[21->33]
                                  struct_decl[21->33]
                                    spec_qualifier_list[21->24]
                                      type_spec[21->24]
                                        int[21->24, "int"]
                                    struct_declarator_1_comma[25->32]
                                      struct_declarator[25->32]
                                        declarator[25->32]
                                          pointer_opt[25->25]
                                          direct_declarator[25->32]
                                            id[25->32, "element"]
                                    ;[32->33, ";"]
                                struct_decl[38->49]
                                  spec_qualifier_list[38->41]
                                    type_spec[38->41]
                                      int[38->41, "int"]
                                  struct_declarator_1_comma[42->48]
                                    struct_declarator[42->48]
                                      declarator[42->48]
                                        pointer_opt[42->42]
                                        direct_declarator[42->48]
                                          id[42->48, "weight"]
                                  ;[48->49, ";"]
                              }[50->51, "}"]
                      decl_specs_g1[52->56]
                        type_spec[52->56]
                          typedef_name[52->56]
                            id[52->56, "Atom"]
                  init_declarator_list_opt[56->56]
                ;[56->57, ";"]
          external_decl[59->77]
            decl[59->77]
              decl_body[59->76]
                decl_specs[59->76]
                  decl_specs_g1_1[59->76]
                    decl_specs_g1_1[59->70]
                      decl_specs_g1_1[59->66]
                        decl_specs_g1[59->66]
                          storage_class_spec[59->66]
                            typedef[59->66, "typedef"]
                      decl_specs_g1[67->70]
                        type_spec[67->70]
                          int[67->70, "int"]
                    decl_specs_g1[71->76]
                      type_spec[71->76]
                        typedef_name[71->76]
                          id[71->76, "int_T"]
                init_declarator_list_opt[76->76]
              ;[76->77, ";"]
        external_decl[78->90]
          decl[78->90]
            decl_body[78->89]
              decl_specs[78->82]
                decl_specs_g1_1[78->82]
                  decl_specs_g1[78->82]
                    type_spec[78->82]
                      typedef_name[78->82]
                        id[78->82, "Atom"]
              init_declarator_list_opt[83->89]
                init_declarator_list[83->89]
                  init_declarator_1_comma[83->89]
                    init_declarator[83->89]
                      declarator[83->89]
                        pointer_opt[83->83]
                        direct_declarator[83->89]
                          id[83->89, "helium"]
            ;[89->90, ";"]
      external_decl[91->101]
        decl[91->101]
          decl_body[91->100]
            decl_specs[91->94]
              decl_specs_g1_1[91->94]
                decl_specs_g1[91->94]
                  type_spec[91->94]
                    int[91->94, "int"]
            init_declarator_list_opt[95->100]
              init_declarator_list[95->100]
                init_declarator_1_comma[95->100]
                  init_declarator[95->100]
                    declarator[95->96]
                      pointer_opt[95->95]
                      direct_declarator[95->96]
                        id[95->96, "a"]
                    =[97->98, "="]
                    initializer[99->100]
                      assignment_exp[99->100]
                        conditional_exp[99->100]
                          logical_or_exp[99->100]
                            logical_and_exp[99->100]
                              inclusive_or_exp[99->100]
                                exclusive_or_exp[99->100]
                                  and_exp[99->100]
                                    equality_exp[99->100]
                                      relational_exp[99->100]
                                        shift_expression[99->100]
                                          additive_exp[99->100]
                                            mult_exp[99->100]
                                              cast_exp[99->100]
                                                unary_exp[99->100]
                                                  postfix_exp[99->100]
                                                    primary_exp[99->100]
                                                      cconst[99->100]
                                                        int_const[99->100, "5"]
          ;[100->101, ";"]
    external_decl[103->495]
      function_definition[103->495]
        decl_specs[103->106]
          decl_specs_g1_1[103->106]
            decl_specs_g1[103->106]
              type_spec[103->106]
                int[103->106, "int"]
        declarator[107->140]
          pointer_opt[107->107]
          direct_declarator[107->140]
            direct_declarator[107->111]
              id[107->111, "main"]
            ([111->112, "("]
            param_type_list[112->139]
              param_decl_1_comma[112->139]
                param_decl_1_comma[112->120]
                  param_decl[112->120]
                    decl_specs[112->115]
                      decl_specs_g1_1[112->115]
                        decl_specs_g1[112->115]
                          type_spec[112->115]
                            int[112->115, "int"]
                    param_decl_g1_opt[116->120]
                      param_decl_g1[116->120]
                        declarator[116->120]
                          pointer_opt[116->116]
                          direct_declarator[116->120]
                            id[116->120, "argc"]
                comma[120->121, ","]
                param_decl[122->139]
                  decl_specs[122->132]
                    decl_specs_g1_1[122->132]
                      decl_specs_g1_1[122->127]
                        decl_specs_g1[122->127]
                          type_qualifier[122->127]
                            const[122->127, "const"]
                      decl_specs_g1[128->132]
                        type_spec[128->132]
                          char[128->132, "char"]
                  param_decl_g1_opt[133->139]
                    param_decl_g1[133->139]
                      declarator[133->139]
                        pointer_opt[133->135]
                          pointer[133->135]
                            *[133->134, "*"]
                            type_qualifier_0[134->134]
                            pointer_opt[134->135]
                              pointer[134->135]
                                *[134->135, "*"]
                                type_qualifier_0[135->135]
                                pointer_opt[135->135]
                        direct_declarator[135->139]
                          id[135->139, "argv"]
              param_type_list_g1_opt[139->139]
            )[139->140, ")"]
        compound_stat[140->495]
          {[140->141, "{"]
          block_item_0[147->493]
            block_item_1[147->493]
              block_item_1[147->478]
                block_item_1[147->457]
                  block_item_1[147->355]
                    block_item_1[147->288]
                      block_item_1[147->222]
                        block_item[147->222]
                          stat[147->222]
                            selection_stat[147->222]
                              if[147->149, "if"]
                              ([150->151, "("]
                              exp[151->156]
                                assignment_exp[151->156]
                                  conditional_exp[151->156]
                                    logical_or_exp[151->156]
                                      logical_and_exp[151->156]
                                        inclusive_or_exp[151->156]
                                          exclusive_or_exp[151->156]
                                            and_exp[151->156]
                                              equality_exp[151->156]
                                                relational_exp[151->156]
                                                  relational_exp[151->152]
                                                    shift_expression[151->152]
                                                      additive_exp[151->152]
                                                        mult_exp[151->152]
                                                          cast_exp[151->152]
                                                            unary_exp[151->152]
                                                              postfix_exp[151->152]
                                                                primary_exp[151->152]
                                                                  id[151->152, "a"]
                                                  >[153->154, ">"]
                                                  shift_expression[155->156]
                                                    additive_exp[155->156]
                                                      mult_exp[155->156]
                                                        cast_exp[155->156]
                                                          unary_exp[155->156]
                                                            postfix_exp[155->156]
                                                              primary_exp[155->156]
                                                                cconst[155->156]
                                                                  int_const[155->156, "5"]
                              )[156->157, ")"]
                              stat[158->222]
                                compound_stat[158->222]
                                  {[158->159, "{"]
                                  block_item_0[168->216]
                                    block_item_1[168->216]
                                      block_item_1[168->187]
                                        block_item[168->187]
                                          stat[168->187]
                                            exp_stat[168->187]
                                              exp_opt[168->186]
                                                exp[168->186]
                                                  assignment_exp[168->186]
                                                    unary_exp[168->182]
                                                      postfix_exp[168->182]
                                                        postfix_exp[168->174]
                                                          primary_exp[168->174]
                                                            id[168->174, "helium"]
                                                        dot[174->175, "."]
                                                        id[175->182, "element"]
                                                    assignment_operator[183->184]
                                                      =[183->184, "="]
                                                    assignment_exp[185->186]
                                                      conditional_exp[185->186]
                                                        logical_or_exp[185->186]
                                                          logical_and_exp[185->186]
                                                            inclusive_or_exp[185->186]
                                                              exclusive_or_exp[185->186]
                                                                and_exp[185->186]
                                                                  equality_exp[185->186]
                                                                    relational_exp[185->186]
                                                                      shift_expression[185->186]
                                                                        additive_exp[185->186]
                                                                          mult_exp[185->186]
                                                                            cast_exp[185->186]
                                                                              unary_exp[185->186]
                                                                                postfix_exp[185->186]
                                                                                  primary_exp[185->186]
                                                                                    cconst[185->186]
                                                                                      int_const[185->186, "1"]
                                              ;[186->187, ";"]
                                      block_item[196->216]
                                        stat[196->216]
                                          exp_stat[196->216]
                                            exp_opt[196->215]
                                              exp[196->215]
                                                assignment_exp[196->215]
                                                  unary_exp[196->209]
                                                    postfix_exp[196->209]
                                                      postfix_exp[196->202]
                                                        primary_exp[196->202]
                                                          id[196->202, "helium"]
                                                      dot[202->203, "."]
                                                      id[203->209, "weight"]
                                                  assignment_operator[210->211]
                                                    =[210->211, "="]
                                                  assignment_exp[212->215]
                                                    conditional_exp[212->215]
                                                      logical_or_exp[212->215]
                                                        logical_and_exp[212->215]
                                                          inclusive_or_exp[212->215]
                                                            exclusive_or_exp[212->215]
                                                              and_exp[212->215]
                                                                equality_exp[212->215]
                                                                  relational_exp[212->215]
                                                                    shift_expression[212->215]
                                                                      additive_exp[212->215]
                                                                        mult_exp[212->215]
                                                                          cast_exp[212->215]
                                                                            unary_exp[212->215]
                                                                              postfix_exp[212->215]
                                                                                primary_exp[212->215]
                                                                                  cconst[212->215]
                                                                                    int_const[212->215, "100"]
                                            ;[215->216, ";"]
                                  }[221->222, "}"]
                      block_item[228->288]
                        stat[228->288]
                          selection_stat[228->288]
                            if[228->230, "if"]
                            ([231->232, "("]
                            exp[232->250]
                              assignment_exp[232->250]
                                conditional_exp[232->250]
                                  logical_or_exp[232->250]
                                    logical_and_exp[232->250]
                                      inclusive_or_exp[232->250]
                                        exclusive_or_exp[232->250]
                                          and_exp[232->250]
                                            equality_exp[232->250]
                                              relational_exp[232->250]
                                                relational_exp[232->233]
                                                  shift_expression[232->233]
                                                    additive_exp[232->233]
                                                      mult_exp[232->233]
                                                        cast_exp[232->233]
                                                          unary_exp[232->233]
                                                            postfix_exp[232->233]
                                                              primary_exp[232->233]
                                                                cconst[232->233]
                                                                  int_const[232->233, "5"]
                                                <[234->235, "<"]
                                                shift_expression[236->250]
                                                  additive_exp[236->250]
                                                    mult_exp[236->250]
                                                      cast_exp[236->250]
                                                        unary_exp[236->250]
                                                          postfix_exp[236->250]
                                                            postfix_exp[236->242]
                                                              primary_exp[236->242]
                                                                id[236->242, "helium"]
                                                            dot[242->243, "."]
                                                            id[243->250, "element"]
                            )[250->251, ")"]
                            stat[252->288]
                              compound_stat[252->288]
                                {[252->253, "{"]
                                block_item_0[262->282]
                                  block_item_1[262->282]
                                    block_item[262->282]
                                      stat[262->282]
                                        exp_stat[262->282]
                                          exp_opt[262->281]
                                            exp[262->281]
                                              assignment_exp[262->281]
                                                unary_exp[262->276]
                                                  postfix_exp[262->276]
                                                    postfix_exp[262->268]
                                                      primary_exp[262->268]
                                                        id[262->268, "helium"]
                                                    dot[268->269, "."]
                                                    id[269->276, "element"]
                                                assignment_operator[277->278]
                                                  =[277->278, "="]
                                                assignment_exp[279->281]
                                                  conditional_exp[279->281]
                                                    logical_or_exp[279->281]
                                                      logical_and_exp[279->281]
                                                        inclusive_or_exp[279->281]
                                                          exclusive_or_exp[279->281]
                                                            and_exp[279->281]
                                                              equality_exp[279->281]
                                                                relational_exp[279->281]
                                                                  shift_expression[279->281]
                                                                    additive_exp[279->281]
                                                                      mult_exp[279->281]
                                                                        cast_exp[279->281]
                                                                          unary_exp[279->281]
                                                                            postfix_exp[279->281]
                                                                              primary_exp[279->281]
                                                                                cconst[279->281]
                                                                                  int_const[279->281, "10"]
                                          ;[281->282, ";"]
                                }[287->288, "}"]
                    block_item[294->355]
                      stat[294->355]
                        iteration_stat[294->355]
                          for[294->297, "for"]
                          ([297->298, "("]
                          decl_body[298->307]
                            decl_specs[298->301]
                              decl_specs_g1_1[298->301]
                                decl_specs_g1[298->301]
                                  type_spec[298->301]
                                    int[298->301, "int"]
                            init_declarator_list_opt[302->307]
                              init_declarator_list[302->307]
                                init_declarator_1_comma[302->307]
                                  init_declarator[302->307]
                                    declarator[302->303]
                                      pointer_opt[302->302]
                                      direct_declarator[302->303]
                                        id[302->303, "n"]
                                    =[304->305, "="]
                                    initializer[306->307]
                                      assignment_exp[306->307]
                                        conditional_exp[306->307]
                                          logical_or_exp[306->307]
                                            logical_and_exp[306->307]
                                              inclusive_or_exp[306->307]
                                                exclusive_or_exp[306->307]
                                                  and_exp[306->307]
                                                    equality_exp[306->307]
                                                      relational_exp[306->307]
                                                        shift_expression[306->307]
                                                          additive_exp[306->307]
                                                            mult_exp[306->307]
                                                              cast_exp[306->307]
                                                                unary_exp[306->307]
                                                                  postfix_exp[306->307]
                                                                    primary_exp[306->307]
                                                                      cconst[306->307]
                                                                        int_const[306->307, "0"]
                          exp_opt[307->307]
                          ;[307->308, ";"]
                          exp_opt[309->326]
                            exp[309->326]
                              assignment_exp[309->326]
                                conditional_exp[309->326]
                                  logical_or_exp[309->326]
                                    logical_and_exp[309->326]
                                      inclusive_or_exp[309->326]
                                        exclusive_or_exp[309->326]
                                          and_exp[309->326]
                                            equality_exp[309->326]
                                              relational_exp[309->326]
                                                relational_exp[309->310]
                                                  shift_expression[309->310]
                                                    additive_exp[309->310]
                                                      mult_exp[309->310]
                                                        cast_exp[309->310]
                                                          unary_exp[309->310]
                                                            postfix_exp[309->310]
                                                              primary_exp[309->310]
                                                                id[309->310, "n"]
                                                <[311->312, "<"]
                                                shift_expression[313->326]
                                                  additive_exp[313->326]
                                                    mult_exp[313->326]
                                                      cast_exp[313->326]
                                                        unary_exp[313->326]
                                                          postfix_exp[313->326]
                                                            postfix_exp[313->319]
                                                              primary_exp[313->319]
                                                                id[313->319, "helium"]
                                                            dot[319->320, "."]
                                                            id[320->326, "weight"]
                          ;[326->327, ";"]
                          exp_opt[328->331]
                            exp[328->331]
                              assignment_exp[328->331]
                                conditional_exp[328->331]
                                  logical_or_exp[328->331]
                                    logical_and_exp[328->331]
                                      inclusive_or_exp[328->331]
                                        exclusive_or_exp[328->331]
                                          and_exp[328->331]
                                            equality_exp[328->331]
                                              relational_exp[328->331]
                                                shift_expression[328->331]
                                                  additive_exp[328->331]
                                                    mult_exp[328->331]
                                                      cast_exp[328->331]
                                                        unary_exp[328->331]
                                                          postfix_exp[328->331]
                                                            postfix_exp[328->329]
                                                              primary_exp[328->329]
                                                                id[328->329, "n"]
                                                            ++[329->331, "++"]
                          )[331->332, ")"]
                          stat[332->355]
                            compound_stat[332->355]
                              {[332->333, "{"]
                              block_item_0[342->349]
                                block_item_1[342->349]
                                  block_item[342->349]
                                    stat[342->349]
                                      exp_stat[342->349]
                                        exp_opt[342->348]
                                          exp[342->348]
                                            assignment_exp[342->348]
                                              unary_exp[342->343]
                                                postfix_exp[342->343]
                                                  primary_exp[342->343]
                                                    id[342->343, "a"]
                                              assignment_operator[344->345]
                                                =[344->345, "="]
                                              assignment_exp[346->348]
                                                conditional_exp[346->348]
                                                  logical_or_exp[346->348]
                                                    logical_and_exp[346->348]
                                                      inclusive_or_exp[346->348]
                                                        exclusive_or_exp[346->348]
                                                          and_exp[346->348]
                                                            equality_exp[346->348]
                                                              relational_exp[346->348]
                                                                shift_expression[346->348]
                                                                  additive_exp[346->348]
                                                                    mult_exp[346->348]
                                                                      cast_exp[346->348]
                                                                        unary_exp[346->348]
                                                                          postfix_exp[346->348]
                                                                            primary_exp[346->348]
                                                                              cconst[346->348]
                                                                                int_const[346->348, "10"]
                                        ;[348->349, ";"]
                              }[354->355, "}"]
                  block_item[361->457]
                    stat[361->457]
                      iteration_stat[361->457]
                        while[361->366, "while"]
                        ([366->367, "("]
                        exp[367->386]
                          assignment_exp[367->386]
                            conditional_exp[367->386]
                              logical_or_exp[367->386]
                                logical_and_exp[367->386]
                                  inclusive_or_exp[367->386]
                                    exclusive_or_exp[367->386]
                                      and_exp[367->386]
                                        equality_exp[367->386]
                                          relational_exp[367->386]
                                            relational_exp[367->381]
                                              shift_expression[367->381]
                                                additive_exp[367->381]
                                                  mult_exp[367->381]
                                                    cast_exp[367->381]
                                                      unary_exp[367->381]
                                                        postfix_exp[367->381]
                                                          postfix_exp[367->373]
                                                            primary_exp[367->373]
                                                              id[367->373, "helium"]
                                                          dot[373->374, "."]
                                                          id[374->381, "element"]
                                            <[382->383, "<"]
                                            shift_expression[384->386]
                                              additive_exp[384->386]
                                                mult_exp[384->386]
                                                  cast_exp[384->386]
                                                    unary_exp[384->386]
                                                      postfix_exp[384->386]
                                                        primary_exp[384->386]
                                                          cconst[384->386]
                                                            int_const[384->386, "10"]
                        )[386->387, ")"]
                        stat[387->457]
                          compound_stat[387->457]
                            {[387->388, "{"]
                            block_item_0[397->451]
                              block_item_1[397->451]
                                block_item[397->451]
                                  stat[397->451]
                                    exp_stat[397->451]
                                      exp_opt[397->450]
                                        exp[397->450]
                                          assignment_exp[397->450]
                                            unary_exp[397->411]
                                              postfix_exp[397->411]
                                                postfix_exp[397->403]
                                                  primary_exp[397->403]
                                                    id[397->403, "helium"]
                                                dot[403->404, "."]
                                                id[404->411, "element"]
                                            assignment_operator[412->413]
                                              =[412->413, "="]
                                            assignment_exp[414->450]
                                              conditional_exp[414->450]
                                                logical_or_exp[414->450]
                                                  logical_and_exp[414->450]
                                                    inclusive_or_exp[414->450]
                                                      exclusive_or_exp[414->450]
                                                        and_exp[414->450]
                                                          equality_exp[414->450]
                                                            relational_exp[414->450]
                                                              shift_expression[414->450]
                                                                additive_exp[414->450]
                                                                  additive_exp[414->444]
                                                                    additive_exp[414->427]
                                                                      mult_exp[414->427]
                                                                        cast_exp[414->427]
                                                                          unary_exp[414->427]
                                                                            postfix_exp[414->427]
                                                                              postfix_exp[414->420]
                                                                                primary_exp[414->420]
                                                                                  id[414->420, "helium"]
                                                                              dot[420->421, "."]
                                                                              id[421->427, "weight"]
                                                                    +[428->429, "+"]
                                                                    mult_exp[430->444]
                                                                      cast_exp[430->444]
                                                                        unary_exp[430->444]
                                                                          postfix_exp[430->444]
                                                                            postfix_exp[430->436]
                                                                              primary_exp[430->436]
                                                                                id[430->436, "helium"]
                                                                            dot[436->437, "."]
                                                                            id[437->444, "element"]
                                                                  +[445->446, "+"]
                                                                  mult_exp[447->450]
                                                                    cast_exp[447->450]
                                                                      unary_exp[447->450]
                                                                        postfix_exp[447->450]
                                                                          primary_exp[447->450]
                                                                            cconst[447->450]
                                                                              int_const[447->450, "100"]
                                      ;[450->451, ";"]
                            }[456->457, "}"]
                block_item[463->478]
                  decl[463->478]
                    decl_body[463->477]
                      decl_specs[463->468]
                        decl_specs_g1_1[463->468]
                          decl_specs_g1[463->468]
                            type_spec[463->468]
                              typedef_name[463->468]
                                id[463->468, "int_T"]
                      init_declarator_list_opt[469->477]
                        init_declarator_list[469->477]
                          init_declarator_1_comma[469->477]
                            init_declarator[469->477]
                              declarator[469->472]
                                pointer_opt[469->469]
                                direct_declarator[469->472]
                                  id[469->472, "nja"]
                              =[473->474, "="]
                              initializer[475->477]
                                assignment_exp[475->477]
                                  conditional_exp[475->477]
                                    logical_or_exp[475->477]
                                      logical_and_exp[475->477]
                                        inclusive_or_exp[475->477]
                                          exclusive_or_exp[475->477]
                                            and_exp[475->477]
                                              equality_exp[475->477]
                                                relational_exp[475->477]
                                                  shift_expression[475->477]
                                                    additive_exp[475->477]
                                                      mult_exp[475->477]
                                                        cast_exp[475->477]
                                                          unary_exp[475->477]
                                                            postfix_exp[475->477]
                                                              primary_exp[475->477]
                                                                cconst[475->477]
                                                                  int_const[475->477, "10"]
                    ;[477->478, ";"]
              block_item[484->493]
                stat[484->493]
                  jump_stat[484->493]
                    return[484->490, "return"]
                    exp[491->492]
                      assignment_exp[491->492]
                        conditional_exp[491->492]
                          logical_or_exp[491->492]
                            logical_and_exp[491->492]
                              inclusive_or_exp[491->492]
                                exclusive_or_exp[491->492]
                                  and_exp[491->492]
                                    equality_exp[491->492]
                                      relational_exp[491->492]
                                        shift_expression[491->492]
                                          additive_exp[491->492]
                                            mult_exp[491->492]
                                              cast_exp[491->492]
                                                unary_exp[491->492]
                                                  postfix_exp[491->492]
                                                    primary_exp[491->492]
                                                      cconst[491->492]
                                                        int_const[491->492, "0"]
                    ;[492->493, ";"]
          }[494->495, "}"]