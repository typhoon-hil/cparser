translation_unit[0->177]
  external_decl_1[0->177]
    external_decl_1[0->95]
      external_decl_1[0->49]
        external_decl_1[0->19]
          external_decl[0->19]
            function_definition[0->19]
              decl_specs[0->4]
                decl_specs_g1_1[0->4]
                  decl_specs_g1[0->4]
                    type_spec[0->4]
                      void[0->4, "void"]
              declarator[5->16]
                pointer_opt[5->5]
                direct_declarator[5->16]
                  direct_declarator[5->9]
                    id[5->9, "fn_a"]
                  ([9->10, "("]
                  param_type_list[10->15]
                    param_decl_1_comma[10->15]
                      param_decl[10->15]
                        decl_specs[10->13]
                          decl_specs_g1_1[10->13]
                            decl_specs_g1[10->13]
                              type_spec[10->13]
                                int[10->13, "int"]
                        param_decl_g1_opt[14->15]
                          param_decl_g1[14->15]
                            declarator[14->15]
                              pointer_opt[14->14]
                              direct_declarator[14->15]
                                id[14->15, "a"]
                    param_type_list_g1_opt[15->15]
                  )[15->16, ")"]
              compound_stat[17->19]
                {[17->18, "{"]
                block_item_0[18->18]
                }[18->19, "}"]
        external_decl[21->49]
          function_definition[21->49]
            decl_specs[21->24]
              decl_specs_g1_1[21->24]
                decl_specs_g1[21->24]
                  type_spec[21->24]
                    int[21->24, "int"]
            declarator[25->31]
              pointer_opt[25->25]
              direct_declarator[25->31]
                direct_declarator[25->29]
                  id[25->29, "fn_b"]
                ([29->30, "("]
                )[30->31, ")"]
            compound_stat[32->49]
              {[32->33, "{"]
              block_item_0[38->47]
                block_item_1[38->47]
                  block_item[38->47]
                    stat[38->47]
                      jump_stat[38->47]
                        return[38->44, "return"]
                        exp[45->46]
                          assignment_exp[45->46]
                            conditional_exp[45->46]
                              logical_or_exp[45->46]
                                logical_and_exp[45->46]
                                  inclusive_or_exp[45->46]
                                    exclusive_or_exp[45->46]
                                      and_exp[45->46]
                                        equality_exp[45->46]
                                          relational_exp[45->46]
                                            shift_expression[45->46]
                                              additive_exp[45->46]
                                                mult_exp[45->46]
                                                  cast_exp[45->46]
                                                    unary_exp[45->46]
                                                      postfix_exp[45->46]
                                                        primary_exp[45->46]
                                                          cconst[45->46]
                                                            int_const[45->46, "0"]
                        ;[46->47, ";"]
              }[48->49, "}"]
      external_decl[51->95]
        function_definition[51->95]
          decl_specs[51->54]
            decl_specs_g1_1[51->54]
              decl_specs_g1[51->54]
                type_spec[51->54]
                  int[51->54, "int"]
          declarator[55->73]
            pointer_opt[55->55]
            direct_declarator[55->73]
              direct_declarator[55->59]
                id[55->59, "fn_c"]
              ([59->60, "("]
              param_type_list[60->72]
                param_decl_1_comma[60->72]
                  param_decl_1_comma[60->65]
                    param_decl[60->65]
                      decl_specs[60->63]
                        decl_specs_g1_1[60->63]
                          decl_specs_g1[60->63]
                            type_spec[60->63]
                              int[60->63, "int"]
                      param_decl_g1_opt[64->65]
                        param_decl_g1[64->65]
                          declarator[64->65]
                            pointer_opt[64->64]
                            direct_declarator[64->65]
                              id[64->65, "a"]
                  comma[65->66, ","]
                  param_decl[67->72]
                    decl_specs[67->70]
                      decl_specs_g1_1[67->70]
                        decl_specs_g1[67->70]
                          type_spec[67->70]
                            int[67->70, "int"]
                    param_decl_g1_opt[71->72]
                      param_decl_g1[71->72]
                        declarator[71->72]
                          pointer_opt[71->71]
                          direct_declarator[71->72]
                            id[71->72, "b"]
                param_type_list_g1_opt[72->72]
              )[72->73, ")"]
          compound_stat[74->95]
            {[74->75, "{"]
            block_item_0[80->93]
              block_item_1[80->93]
                block_item[80->93]
                  stat[80->93]
                    jump_stat[80->93]
                      return[80->86, "return"]
                      exp[87->92]
                        assignment_exp[87->92]
                          conditional_exp[87->92]
                            logical_or_exp[87->92]
                              logical_and_exp[87->92]
                                inclusive_or_exp[87->92]
                                  exclusive_or_exp[87->92]
                                    and_exp[87->92]
                                      equality_exp[87->92]
                                        relational_exp[87->92]
                                          shift_expression[87->92]
                                            additive_exp[87->92]
                                              additive_exp[87->88]
                                                mult_exp[87->88]
                                                  cast_exp[87->88]
                                                    unary_exp[87->88]
                                                      postfix_exp[87->88]
                                                        primary_exp[87->88]
                                                          id[87->88, "a"]
                                              +[89->90, "+"]
                                              mult_exp[91->92]
                                                cast_exp[91->92]
                                                  unary_exp[91->92]
                                                    postfix_exp[91->92]
                                                      primary_exp[91->92]
                                                        id[91->92, "b"]
                      ;[92->93, ";"]
            }[94->95, "}"]
    external_decl[97->177]
      function_definition[97->177]
        decl_specs[97->100]
          decl_specs_g1_1[97->100]
            decl_specs_g1[97->100]
              type_spec[97->100]
                int[97->100, "int"]
        declarator[101->107]
          pointer_opt[101->101]
          direct_declarator[101->107]
            direct_declarator[101->105]
              id[101->105, "main"]
            ([105->106, "("]
            )[106->107, ")"]
        compound_stat[108->177]
          {[108->109, "{"]
          block_item_0[114->175]
            block_item_1[114->175]
              block_item_1[114->151]
                block_item_1[114->131]
                  block_item_1[114->120]
                    block_item[114->120]
                      decl[114->120]
                        decl_body[114->119]
                          decl_specs[114->117]
                            decl_specs_g1_1[114->117]
                              decl_specs_g1[114->117]
                                type_spec[114->117]
                                  int[114->117, "int"]
                          init_declarator_list_opt[118->119]
                            init_declarator_list[118->119]
                              init_declarator_1_comma[118->119]
                                init_declarator[118->119]
                                  declarator[118->119]
                                    pointer_opt[118->118]
                                    direct_declarator[118->119]
                                      id[118->119, "x"]
                        ;[119->120, ";"]
                  block_item[125->131]
                    decl[125->131]
                      decl_body[125->130]
                        decl_specs[125->127]
                          decl_specs_g1_1[125->127]
                            decl_specs_g1[125->127]
                              type_spec[125->127]
                                typedef_name[125->127]
                                  id[125->127, "fn"]
                        init_declarator_list_opt[127->130]
                          init_declarator_list[127->130]
                            init_declarator_1_comma[127->130]
                              init_declarator[127->130]
                                declarator[127->130]
                                  pointer_opt[127->127]
                                  direct_declarator[127->130]
                                    ([127->128, "("]
                                    declarator[128->129]
                                      pointer_opt[128->128]
                                      direct_declarator[128->129]
                                        id[128->129, "x"]
                                    )[129->130, ")"]
                      ;[130->131, ";"]
                block_item[136->151]
                  decl[136->151]
                    decl_body[136->150]
                      decl_specs[136->139]
                        decl_specs_g1_1[136->139]
                          decl_specs_g1[136->139]
                            type_spec[136->139]
                              int[136->139, "int"]
                      init_declarator_list_opt[140->150]
                        init_declarator_list[140->150]
                          init_declarator_1_comma[140->150]
                            init_declarator[140->150]
                              declarator[140->141]
                                pointer_opt[140->140]
                                direct_declarator[140->141]
                                  id[140->141, "y"]
                              =[142->143, "="]
                              initializer[144->150]
                                assignment_exp[144->150]
                                  conditional_exp[144->150]
                                    logical_or_exp[144->150]
                                      logical_and_exp[144->150]
                                        inclusive_or_exp[144->150]
                                          exclusive_or_exp[144->150]
                                            and_exp[144->150]
                                              equality_exp[144->150]
                                                relational_exp[144->150]
                                                  shift_expression[144->150]
                                                    additive_exp[144->150]
                                                      mult_exp[144->150]
                                                        cast_exp[144->150]
                                                          unary_exp[144->150]
                                                            postfix_exp[144->150]
                                                              postfix_exp[144->148]
                                                                primary_exp[144->148]
                                                                  id[144->148, "fn_b"]
                                                              ([148->149, "("]
                                                              assignment_exp_0_comma[149->149]
                                                              )[149->150, ")"]
                    ;[150->151, ";"]
              block_item[156->175]
                decl[156->175]
                  decl_body[156->174]
                    decl_specs[156->159]
                      decl_specs_g1_1[156->159]
                        decl_specs_g1[156->159]
                          type_spec[156->159]
                            int[156->159, "int"]
                    init_declarator_list_opt[160->174]
                      init_declarator_list[160->174]
                        init_declarator_1_comma[160->174]
                          init_declarator[160->174]
                            declarator[160->161]
                              pointer_opt[160->160]
                              direct_declarator[160->161]
                                id[160->161, "z"]
                            =[162->163, "="]
                            initializer[164->174]
                              assignment_exp[164->174]
                                conditional_exp[164->174]
                                  logical_or_exp[164->174]
                                    logical_and_exp[164->174]
                                      inclusive_or_exp[164->174]
                                        exclusive_or_exp[164->174]
                                          and_exp[164->174]
                                            equality_exp[164->174]
                                              relational_exp[164->174]
                                                shift_expression[164->174]
                                                  additive_exp[164->174]
                                                    mult_exp[164->174]
                                                      cast_exp[164->174]
                                                        unary_exp[164->174]
                                                          postfix_exp[164->174]
                                                            postfix_exp[164->168]
                                                              primary_exp[164->168]
                                                                id[164->168, "fn_c"]
                                                            ([168->169, "("]
                                                            assignment_exp_0_comma[169->173]
                                                              assignment_exp_1_comma[169->173]
                                                                assignment_exp_1_comma[169->170]
                                                                  assignment_exp[169->170]
                                                                    conditional_exp[169->170]
                                                                      logical_or_exp[169->170]
                                                                        logical_and_exp[169->170]
                                                                          inclusive_or_exp[169->170]
                                                                            exclusive_or_exp[169->170]
                                                                              and_exp[169->170]
                                                                                equality_exp[169->170]
                                                                                  relational_exp[169->170]
                                                                                    shift_expression[169->170]
                                                                                      additive_exp[169->170]
                                                                                        mult_exp[169->170]
                                                                                          cast_exp[169->170]
                                                                                            unary_exp[169->170]
                                                                                              postfix_exp[169->170]
                                                                                                primary_exp[169->170]
                                                                                                  cconst[169->170]
                                                                                                    int_const[169->170, "1"]
                                                                comma[170->171, ","]
                                                                assignment_exp[172->173]
                                                                  conditional_exp[172->173]
                                                                    logical_or_exp[172->173]
                                                                      logical_and_exp[172->173]
                                                                        inclusive_or_exp[172->173]
                                                                          exclusive_or_exp[172->173]
                                                                            and_exp[172->173]
                                                                              equality_exp[172->173]
                                                                                relational_exp[172->173]
                                                                                  shift_expression[172->173]
                                                                                    additive_exp[172->173]
                                                                                      mult_exp[172->173]
                                                                                        cast_exp[172->173]
                                                                                          unary_exp[172->173]
                                                                                            postfix_exp[172->173]
                                                                                              primary_exp[172->173]
                                                                                                cconst[172->173]
                                                                                                  int_const[172->173, "2"]
                                                            )[173->174, ")"]
                  ;[174->175, ";"]
          }[176->177, "}"]