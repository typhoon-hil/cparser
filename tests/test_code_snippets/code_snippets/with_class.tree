translation_unit[0->460]
  external_decl_1[0->460]
    external_decl_1[0->181]
      external_decl_1[0->155]
        external_decl_1[0->128]
          external_decl_1[0->108]
            external_decl_1[0->73]
              external_decl_1[0->52]
                external_decl_1[0->35]
                  external_decl[0->35]
                    line_directive[0->35]
                      #[0->1, "#"]
                      int_const[2->3, "1"]
                      string[4->34, ""/tmp/tmp1ssk41g6/cpp_input.c""]
                      line_directive_int_opt[35->35]
                external_decl[35->52]
                  line_directive[35->52]
                    #[35->36, "#"]
                    int_const[37->38, "1"]
                    string[39->51, ""<built-in>""]
                    line_directive_int_opt[52->52]
              external_decl[52->73]
                line_directive[52->73]
                  #[52->53, "#"]
                  int_const[54->55, "1"]
                  string[56->72, ""<command-line>""]
                  line_directive_int_opt[73->73]
            external_decl[73->108]
              line_directive[73->108]
                #[73->74, "#"]
                int_const[75->76, "1"]
                string[77->107, ""/tmp/tmp1ssk41g6/cpp_input.c""]
                line_directive_int_opt[108->108]
          external_decl[108->128]
            decl[108->128]
              decl_body[108->127]
                decl_specs[108->127]
                  decl_specs_g1_1[108->127]
                    decl_specs_g1_1[108->122]
                      decl_specs_g1_1[108->115]
                        decl_specs_g1[108->115]
                          storage_class_spec[108->115]
                            typedef[108->115, "typedef"]
                      decl_specs_g1[116->122]
                        type_spec[116->122]
                          double[116->122, "double"]
                    decl_specs_g1[123->127]
                      type_spec[123->127]
                        typedef_name[123->127]
                          id[123->127, "real"]
                init_declarator_list_opt[127->127]
              ;[127->128, ";"]
        external_decl[129->155]
          decl[129->155]
            decl_body[129->154]
              decl_specs[129->154]
                decl_specs_g1_1[129->154]
                  decl_specs_g1_1[129->149]
                    decl_specs_g1_1[129->145]
                      decl_specs_g1_1[129->136]
                        decl_specs_g1[129->136]
                          storage_class_spec[129->136]
                            typedef[129->136, "typedef"]
                      decl_specs_g1[137->145]
                        type_spec[137->145]
                          unsigned[137->145, "unsigned"]
                    decl_specs_g1[146->149]
                      type_spec[146->149]
                        int[146->149, "int"]
                  decl_specs_g1[150->154]
                    type_spec[150->154]
                      typedef_name[150->154]
                        id[150->154, "uint"]
              init_declarator_list_opt[154->154]
            ;[154->155, ";"]
      external_decl[156->181]
        decl[156->181]
          decl_body[156->180]
            decl_specs[156->180]
              decl_specs_g1_1[156->180]
                decl_specs_g1_1[156->172]
                  decl_specs_g1_1[156->163]
                    decl_specs_g1[156->163]
                      storage_class_spec[156->163]
                        typedef[156->163, "typedef"]
                  decl_specs_g1[164->172]
                    type_spec[164->172]
                      _Complex[164->172, "_Complex"]
                decl_specs_g1[173->180]
                  type_spec[173->180]
                    typedef_name[173->180]
                      id[173->180, "complex"]
            init_declarator_list_opt[180->180]
          ;[180->181, ";"]
    external_decl[183->460]
      function_definition[183->460]
        decl_specs[183->187]
          decl_specs_g1_1[183->187]
            decl_specs_g1[183->187]
              type_spec[183->187]
                void[183->187, "void"]
        declarator[188->201]
          pointer_opt[188->188]
          direct_declarator[188->201]
            direct_declarator[188->199]
              id[188->199, "wrapper_fnc"]
            ([199->200, "("]
            )[200->201, ")"]
        compound_stat[202->460]
          {[202->203, "{"]
          block_item_0[208->457]
            block_item_1[208->457]
              block_item_1[208->420]
                block_item_1[208->407]
                  block_item_1[208->395]
                    block_item_1[208->379]
                      block_item_1[208->360]
                        block_item_1[208->332]
                          block_item_1[208->299]
                            block_item_1[208->286]
                              block_item_1[208->233]
                                block_item_1[208->221]
                                  block_item[208->221]
                                    decl[208->221]
                                      decl_body[208->220]
                                        decl_specs[208->220]
                                          decl_specs_g1_1[208->220]
                                            decl_specs_g1[208->220]
                                              type_spec[208->220]
                                                struct_or_union_spec[208->220]
                                                  struct_or_union[208->213]
                                                    class[208->213, "class"]
                                                  id[214->220, "Triple"]
                                        init_declarator_list_opt[220->220]
                                      ;[220->221, ";"]
                                block_item[222->233]
                                  decl[222->233]
                                    decl_body[222->232]
                                      decl_specs[222->228]
                                        decl_specs_g1_1[222->228]
                                          decl_specs_g1[222->228]
                                            type_spec[222->228]
                                              typedef_name[222->228]
                                                id[222->228, "Triple"]
                                      init_declarator_list_opt[229->232]
                                        init_declarator_list[229->232]
                                          init_declarator_1_comma[229->232]
                                            init_declarator[229->232]
                                              declarator[229->232]
                                                pointer_opt[229->229]
                                                direct_declarator[229->232]
                                                  id[229->232, "obj"]
                                    ;[232->233, ";"]
                              block_item[235->286]
                                decl[235->286]
                                  decl_body[235->285]
                                    decl_specs[235->285]
                                      decl_specs_g1_1[235->285]
                                        decl_specs_g1[235->285]
                                          type_spec[235->285]
                                            enum_spec[235->285]
                                              enum[235->239, "enum"]
                                              id[240->256, "testing_for_fail"]
                                              {[257->258, "{"]
                                              enumerator_1_comma[263->283]
                                                enumerator_1_comma[263->270]
                                                  enumerator[263->270]
                                                    id[263->270, "VALUE_1"]
                                                comma[270->271, ","]
                                                enumerator[276->283]
                                                  id[276->283, "VALUE_2"]
                                              comma_opt[284->284]
                                              }[284->285, "}"]
                                    init_declarator_list_opt[285->285]
                                  ;[285->286, ";"]
                            block_item[289->299]
                              decl[289->299]
                                decl_body[289->298]
                                  decl_specs[289->292]
                                    decl_specs_g1_1[289->292]
                                      decl_specs_g1[289->292]
                                        type_spec[289->292]
                                          int[289->292, "int"]
                                  init_declarator_list_opt[293->298]
                                    init_declarator_list[293->298]
                                      init_declarator_1_comma[293->298]
                                        init_declarator[293->298]
                                          declarator[293->298]
                                            pointer_opt[293->293]
                                            direct_declarator[293->298]
                                              direct_declarator[293->294]
                                                id[293->294, "a"]
                                              [[294->295, "["]
                                              const_exp[295->297]
                                                conditional_exp[295->297]
                                                  logical_or_exp[295->297]
                                                    logical_and_exp[295->297]
                                                      inclusive_or_exp[295->297]
                                                        exclusive_or_exp[295->297]
                                                          and_exp[295->297]
                                                            equality_exp[295->297]
                                                              relational_exp[295->297]
                                                                shift_expression[295->297]
                                                                  additive_exp[295->297]
                                                                    mult_exp[295->297]
                                                                      cast_exp[295->297]
                                                                        unary_exp[295->297]
                                                                          postfix_exp[295->297]
                                                                            primary_exp[295->297]
                                                                              cconst[295->297]
                                                                                int_const[295->297, "10"]
                                              ][297->298, "]"]
                                ;[298->299, ";"]
                          block_item[302->332]
                            decl[302->332]
                              decl_body[302->331]
                                decl_specs[302->331]
                                  decl_specs_g1_1[302->331]
                                    decl_specs_g1[302->331]
                                      type_spec[302->331]
                                        struct_or_union_spec[302->331]
                                          struct_or_union[302->308]
                                            struct[302->308, "struct"]
                                          id[309->314, "value"]
                                          {[315->316, "{"]
                                          struct_decl_1[321->329]
                                            struct_decl[321->329]
                                              spec_qualifier_list[321->326]
                                                type_spec[321->326]
                                                  float[321->326, "float"]
                                              struct_declarator_1_comma[327->328]
                                                struct_declarator[327->328]
                                                  declarator[327->328]
                                                    pointer_opt[327->327]
                                                    direct_declarator[327->328]
                                                      id[327->328, "a"]
                                              ;[328->329, ";"]
                                          }[330->331, "}"]
                                init_declarator_list_opt[331->331]
                              ;[331->332, ";"]
                        block_item[334->360]
                          decl[334->360]
                            decl_body[334->359]
                              decl_specs[334->346]
                                decl_specs_g1_1[334->346]
                                  decl_specs_g1[334->346]
                                    type_spec[334->346]
                                      struct_or_union_spec[334->346]
                                        struct_or_union[334->340]
                                          struct[334->340, "struct"]
                                        id[341->346, "value"]
                              init_declarator_list_opt[347->359]
                                init_declarator_list[347->359]
                                  init_declarator_1_comma[347->359]
                                    init_declarator[347->359]
                                      declarator[347->359]
                                        pointer_opt[347->347]
                                        direct_declarator[347->359]
                                          id[347->359, "value_struct"]
                            ;[359->360, ";"]
                      block_item[363->379]
                        decl[363->379]
                          decl_body[363->378]
                            decl_specs[363->366]
                              decl_specs_g1_1[363->366]
                                decl_specs_g1[363->366]
                                  type_spec[363->366]
                                    int[363->366, "int"]
                            init_declarator_list_opt[367->378]
                              init_declarator_list[367->378]
                                init_declarator_1_comma[367->378]
                                  init_declarator[367->378]
                                    declarator[367->378]
                                      pointer_opt[367->367]
                                      direct_declarator[367->378]
                                        direct_declarator[367->375]
                                          direct_declarator[367->372]
                                            id[367->372, "array"]
                                          [[372->373, "["]
                                          const_exp[373->374]
                                            conditional_exp[373->374]
                                              logical_or_exp[373->374]
                                                logical_and_exp[373->374]
                                                  inclusive_or_exp[373->374]
                                                    exclusive_or_exp[373->374]
                                                      and_exp[373->374]
                                                        equality_exp[373->374]
                                                          relational_exp[373->374]
                                                            shift_expression[373->374]
                                                              additive_exp[373->374]
                                                                mult_exp[373->374]
                                                                  cast_exp[373->374]
                                                                    unary_exp[373->374]
                                                                      postfix_exp[373->374]
                                                                        primary_exp[373->374]
                                                                          cconst[373->374]
                                                                            int_const[373->374, "5"]
                                          ][374->375, "]"]
                                        [[375->376, "["]
                                        const_exp[376->377]
                                          conditional_exp[376->377]
                                            logical_or_exp[376->377]
                                              logical_and_exp[376->377]
                                                inclusive_or_exp[376->377]
                                                  exclusive_or_exp[376->377]
                                                    and_exp[376->377]
                                                      equality_exp[376->377]
                                                        relational_exp[376->377]
                                                          shift_expression[376->377]
                                                            additive_exp[376->377]
                                                              mult_exp[376->377]
                                                                cast_exp[376->377]
                                                                  unary_exp[376->377]
                                                                    postfix_exp[376->377]
                                                                      primary_exp[376->377]
                                                                        cconst[376->377]
                                                                          int_const[376->377, "2"]
                                        ][377->378, "]"]
                          ;[378->379, ";"]
                    block_item[381->395]
                      decl[381->395]
                        decl_body[381->394]
                          decl_specs[381->384]
                            decl_specs_g1_1[381->384]
                              decl_specs_g1[381->384]
                                type_spec[381->384]
                                  int[381->384, "int"]
                          init_declarator_list_opt[385->394]
                            init_declarator_list[385->394]
                              init_declarator_1_comma[385->394]
                                init_declarator[385->394]
                                  declarator[385->388]
                                    pointer_opt[385->385]
                                    direct_declarator[385->388]
                                      id[385->388, "var"]
                                  =[389->390, "="]
                                  initializer[391->394]
                                    assignment_exp[391->394]
                                      conditional_exp[391->394]
                                        logical_or_exp[391->394]
                                          logical_and_exp[391->394]
                                            inclusive_or_exp[391->394]
                                              exclusive_or_exp[391->394]
                                                and_exp[391->394]
                                                  equality_exp[391->394]
                                                    relational_exp[391->394]
                                                      shift_expression[391->394]
                                                        additive_exp[391->394]
                                                          mult_exp[391->394]
                                                            cast_exp[391->394]
                                                              unary_exp[391->394]
                                                                postfix_exp[391->394]
                                                                  primary_exp[391->394]
                                                                    cconst[391->394]
                                                                      int_const[391->394, "789"]
                        ;[394->395, ";"]
                  block_item[397->407]
                    decl[397->407]
                      decl_body[397->406]
                        decl_specs[397->400]
                          decl_specs_g1_1[397->400]
                            decl_specs_g1[397->400]
                              type_spec[397->400]
                                int[397->400, "int"]
                        init_declarator_list_opt[401->406]
                          init_declarator_list[401->406]
                            init_declarator_1_comma[401->406]
                              init_declarator[401->406]
                                declarator[401->406]
                                  pointer_opt[401->402]
                                    pointer[401->402]
                                      *[401->402, "*"]
                                      type_qualifier_0[402->402]
                                      pointer_opt[402->402]
                                  direct_declarator[402->406]
                                    id[402->406, "ptr2"]
                      ;[406->407, ";"]
                block_item[409->420]
                  decl[409->420]
                    decl_body[409->419]
                      decl_specs[409->412]
                        decl_specs_g1_1[409->412]
                          decl_specs_g1[409->412]
                            type_spec[409->412]
                              int[409->412, "int"]
                      init_declarator_list_opt[413->419]
                        init_declarator_list[413->419]
                          init_declarator_1_comma[413->419]
                            init_declarator[413->419]
                              declarator[413->419]
                                pointer_opt[413->415]
                                  pointer[413->415]
                                    *[413->414, "*"]
                                    type_qualifier_0[414->414]
                                    pointer_opt[414->415]
                                      pointer[414->415]
                                        *[414->415, "*"]
                                        type_qualifier_0[415->415]
                                        pointer_opt[415->415]
                                direct_declarator[415->419]
                                  id[415->419, "ptr1"]
                    ;[419->420, ";"]
              block_item[423->457]
                decl[423->457]
                  decl_body[423->456]
                    decl_specs[423->451]
                      decl_specs_g1_1[423->451]
                        decl_specs_g1[423->451]
                          type_spec[423->451]
                            struct_or_union_spec[423->451]
                              struct_or_union[423->428]
                                union[423->428, "union"]
                              id[429->433, "Data"]
                              {[434->435, "{"]
                              struct_decl_1[436->449]
                                struct_decl[436->449]
                                  spec_qualifier_list[436->441]
                                    type_spec[436->441]
                                      float[436->441, "float"]
                                  struct_declarator_1_comma[442->448]
                                    struct_declarator[442->448]
                                      declarator[442->448]
                                        pointer_opt[442->442]
                                        direct_declarator[442->448]
                                          id[442->448, "i_data"]
                                  ;[448->449, ";"]
                              }[450->451, "}"]
                    init_declarator_list_opt[452->456]
                      init_declarator_list[452->456]
                        init_declarator_1_comma[452->456]
                          init_declarator[452->456]
                            declarator[452->456]
                              pointer_opt[452->452]
                              direct_declarator[452->456]
                                id[452->456, "data"]
                  ;[456->457, ";"]
          }[459->460, "}"]