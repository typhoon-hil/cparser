translation_unit[0->319]
  external_decl_1[0->319]
    external_decl_1[0->184]
      external_decl_1[0->78]
        external_decl[0->78]
          decl[0->78]
            decl_body[0->77]
              decl_specs[0->77]
                decl_specs_g1_1[0->77]
                  decl_specs_g1[0->77]
                    type_spec[0->77]
                      struct_or_union_spec[0->77]
                        struct_or_union[0->5]
                          union[0->5, "union"]
                        id[6->13, "student"]
                        {[14->15, "{"]
                        struct_decl_1[19->75]
                          struct_decl_1[19->54]
                            struct_decl_1[19->33]
                              struct_decl[19->33]
                                spec_qualifier_list[19->23]
                                  type_spec[19->23]
                                    char[19->23, "char"]
                                struct_declarator_1_comma[24->32]
                                  struct_declarator[24->32]
                                    declarator[24->32]
                                      pointer_opt[24->24]
                                      direct_declarator[24->32]
                                        direct_declarator[24->28]
                                          id[24->28, "name"]
                                        [[28->29, "["]
                                        const_exp[29->31]
                                          conditional_exp[29->31]
                                            logical_or_exp[29->31]
                                              logical_and_exp[29->31]
                                                inclusive_or_exp[29->31]
                                                  exclusive_or_exp[29->31]
                                                    and_exp[29->31]
                                                      equality_exp[29->31]
                                                        relational_exp[29->31]
                                                          shift_expression[29->31]
                                                            additive_exp[29->31]
                                                              mult_exp[29->31]
                                                                cast_exp[29->31]
                                                                  unary_exp[29->31]
                                                                    postfix_exp[29->31]
                                                                      primary_exp[29->31]
                                                                        cconst[29->31]
                                                                          int_const[29->31, "20"]
                                        ][31->32, "]"]
                                ;[32->33, ";"]
                            struct_decl[37->54]
                              spec_qualifier_list[37->41]
                                type_spec[37->41]
                                  char[37->41, "char"]
                              struct_declarator_1_comma[42->53]
                                struct_declarator[42->53]
                                  declarator[42->53]
                                    pointer_opt[42->42]
                                    direct_declarator[42->53]
                                      direct_declarator[42->49]
                                        id[42->49, "subject"]
                                      [[49->50, "["]
                                      const_exp[50->52]
                                        conditional_exp[50->52]
                                          logical_or_exp[50->52]
                                            logical_and_exp[50->52]
                                              inclusive_or_exp[50->52]
                                                exclusive_or_exp[50->52]
                                                  and_exp[50->52]
                                                    equality_exp[50->52]
                                                      relational_exp[50->52]
                                                        shift_expression[50->52]
                                                          additive_exp[50->52]
                                                            mult_exp[50->52]
                                                              cast_exp[50->52]
                                                                unary_exp[50->52]
                                                                  postfix_exp[50->52]
                                                                    primary_exp[50->52]
                                                                      cconst[50->52]
                                                                        int_const[50->52, "20"]
                                      ][52->53, "]"]
                              ;[53->54, ";"]
                          struct_decl[58->75]
                            spec_qualifier_list[58->63]
                              type_spec[58->63]
                                float[58->63, "float"]
                            struct_declarator_1_comma[64->74]
                              struct_declarator[64->74]
                                declarator[64->74]
                                  pointer_opt[64->64]
                                  direct_declarator[64->74]
                                    id[64->74, "percentage"]
                            ;[74->75, ";"]
                        }[76->77, "}"]
              init_declarator_list_opt[77->77]
            ;[77->78, ";"]
      external_decl[80->184]
        decl[80->184]
          decl_body[80->183]
            decl_specs[80->178]
              decl_specs_g1_1[80->178]
                decl_specs_g1[80->178]
                  type_spec[80->178]
                    struct_or_union_spec[80->178]
                      struct_or_union[80->86]
                        struct[80->86, "struct"]
                      id[87->92, "Books"]
                      {[93->94, "{"]
                      struct_decl_1[98->176]
                        struct_decl_1[98->158]
                          struct_decl_1[98->135]
                            struct_decl_1[98->114]
                              struct_decl[98->114]
                                spec_qualifier_list[98->102]
                                  type_spec[98->102]
                                    char[98->102, "char"]
                                struct_declarator_1_comma[104->113]
                                  struct_declarator[104->113]
                                    declarator[104->113]
                                      pointer_opt[104->104]
                                      direct_declarator[104->113]
                                        direct_declarator[104->109]
                                          id[104->109, "title"]
                                        [[109->110, "["]
                                        const_exp[110->112]
                                          conditional_exp[110->112]
                                            logical_or_exp[110->112]
                                              logical_and_exp[110->112]
                                                inclusive_or_exp[110->112]
                                                  exclusive_or_exp[110->112]
                                                    and_exp[110->112]
                                                      equality_exp[110->112]
                                                        relational_exp[110->112]
                                                          shift_expression[110->112]
                                                            additive_exp[110->112]
                                                              mult_exp[110->112]
                                                                cast_exp[110->112]
                                                                  unary_exp[110->112]
                                                                    postfix_exp[110->112]
                                                                      primary_exp[110->112]
                                                                        cconst[110->112]
                                                                          int_const[110->112, "50"]
                                        ][112->113, "]"]
                                ;[113->114, ";"]
                            struct_decl[118->135]
                              spec_qualifier_list[118->122]
                                type_spec[118->122]
                                  char[118->122, "char"]
                              struct_declarator_1_comma[124->134]
                                struct_declarator[124->134]
                                  declarator[124->134]
                                    pointer_opt[124->124]
                                    direct_declarator[124->134]
                                      direct_declarator[124->130]
                                        id[124->130, "author"]
                                      [[130->131, "["]
                                      const_exp[131->133]
                                        conditional_exp[131->133]
                                          logical_or_exp[131->133]
                                            logical_and_exp[131->133]
                                              inclusive_or_exp[131->133]
                                                exclusive_or_exp[131->133]
                                                  and_exp[131->133]
                                                    equality_exp[131->133]
                                                      relational_exp[131->133]
                                                        shift_expression[131->133]
                                                          additive_exp[131->133]
                                                            mult_exp[131->133]
                                                              cast_exp[131->133]
                                                                unary_exp[131->133]
                                                                  postfix_exp[131->133]
                                                                    primary_exp[131->133]
                                                                      cconst[131->133]
                                                                        int_const[131->133, "50"]
                                      ][133->134, "]"]
                              ;[134->135, ";"]
                          struct_decl[139->158]
                            spec_qualifier_list[139->143]
                              type_spec[139->143]
                                char[139->143, "char"]
                            struct_declarator_1_comma[145->157]
                              struct_declarator[145->157]
                                declarator[145->157]
                                  pointer_opt[145->145]
                                  direct_declarator[145->157]
                                    direct_declarator[145->152]
                                      id[145->152, "subject"]
                                    [[152->153, "["]
                                    const_exp[153->156]
                                      conditional_exp[153->156]
                                        logical_or_exp[153->156]
                                          logical_and_exp[153->156]
                                            inclusive_or_exp[153->156]
                                              exclusive_or_exp[153->156]
                                                and_exp[153->156]
                                                  equality_exp[153->156]
                                                    relational_exp[153->156]
                                                      shift_expression[153->156]
                                                        additive_exp[153->156]
                                                          mult_exp[153->156]
                                                            cast_exp[153->156]
                                                              unary_exp[153->156]
                                                                postfix_exp[153->156]
                                                                  primary_exp[153->156]
                                                                    cconst[153->156]
                                                                      int_const[153->156, "100"]
                                    ][156->157, "]"]
                            ;[157->158, ";"]
                        struct_decl[162->176]
                          spec_qualifier_list[162->165]
                            type_spec[162->165]
                              int[162->165, "int"]
                          struct_declarator_1_comma[168->175]
                            struct_declarator[168->175]
                              declarator[168->175]
                                pointer_opt[168->168]
                                direct_declarator[168->175]
                                  id[168->175, "book_id"]
                          ;[175->176, ";"]
                      }[177->178, "}"]
            init_declarator_list_opt[179->183]
              init_declarator_list[179->183]
                init_declarator_1_comma[179->183]
                  init_declarator[179->183]
                    declarator[179->183]
                      pointer_opt[179->179]
                      direct_declarator[179->183]
                        id[179->183, "book"]
          ;[183->184, ";"]
    external_decl[186->319]
      function_definition[186->319]
        decl_specs[186->189]
          decl_specs_g1_1[186->189]
            decl_specs_g1[186->189]
              type_spec[186->189]
                int[186->189, "int"]
        declarator[190->223]
          pointer_opt[190->190]
          direct_declarator[190->223]
            direct_declarator[190->194]
              id[190->194, "main"]
            ([194->195, "("]
            param_type_list[195->222]
              param_decl_1_comma[195->222]
                param_decl_1_comma[195->203]
                  param_decl[195->203]
                    decl_specs[195->198]
                      decl_specs_g1_1[195->198]
                        decl_specs_g1[195->198]
                          type_spec[195->198]
                            int[195->198, "int"]
                    param_decl_g1_opt[199->203]
                      param_decl_g1[199->203]
                        declarator[199->203]
                          pointer_opt[199->199]
                          direct_declarator[199->203]
                            id[199->203, "argc"]
                comma[203->204, ","]
                param_decl[205->222]
                  decl_specs[205->215]
                    decl_specs_g1_1[205->215]
                      decl_specs_g1_1[205->210]
                        decl_specs_g1[205->210]
                          type_qualifier[205->210]
                            const[205->210, "const"]
                      decl_specs_g1[211->215]
                        type_spec[211->215]
                          char[211->215, "char"]
                  param_decl_g1_opt[216->222]
                    param_decl_g1[216->222]
                      declarator[216->222]
                        pointer_opt[216->218]
                          pointer[216->218]
                            *[216->217, "*"]
                            type_qualifier_0[217->217]
                            pointer_opt[217->218]
                              pointer[217->218]
                                *[217->218, "*"]
                                type_qualifier_0[218->218]
                                pointer_opt[218->218]
                        direct_declarator[218->222]
                          id[218->222, "argv"]
              param_type_list_g1_opt[222->222]
            )[222->223, ")"]
        compound_stat[223->319]
          {[223->224, "{"]
          block_item_0[229->317]
            block_item_1[229->317]
              block_item_1[229->303]
                block_item_1[229->275]
                  block_item_1[229->251]
                    block_item[229->251]
                      decl[229->251]
                        decl_body[229->250]
                          decl_specs[229->242]
                            decl_specs_g1_1[229->242]
                              decl_specs_g1[229->242]
                                type_spec[229->242]
                                  struct_or_union_spec[229->242]
                                    struct_or_union[229->234]
                                      union[229->234, "union"]
                                    id[235->242, "student"]
                          init_declarator_list_opt[243->250]
                            init_declarator_list[243->250]
                              init_declarator_1_comma[243->250]
                                init_declarator[243->250]
                                  declarator[243->250]
                                    pointer_opt[243->243]
                                    direct_declarator[243->250]
                                      id[243->250, "record1"]
                        ;[250->251, ";"]
                  block_item[256->275]
                    decl[256->275]
                      decl_body[256->274]
                        decl_specs[256->268]
                          decl_specs_g1_1[256->268]
                            decl_specs_g1[256->268]
                              type_spec[256->268]
                                struct_or_union_spec[256->268]
                                  struct_or_union[256->262]
                                    struct[256->262, "struct"]
                                  id[263->268, "Books"]
                        init_declarator_list_opt[269->274]
                          init_declarator_list[269->274]
                            init_declarator_1_comma[269->274]
                              init_declarator[269->274]
                                declarator[269->274]
                                  pointer_opt[269->269]
                                  direct_declarator[269->274]
                                    id[269->274, "Book1"]
                      ;[274->275, ";"]
                block_item[279->303]
                  stat[279->303]
                    exp_stat[279->303]
                      exp_opt[279->302]
                        exp[279->302]
                          assignment_exp[279->302]
                            unary_exp[279->292]
                              postfix_exp[279->292]
                                postfix_exp[279->284]
                                  primary_exp[279->284]
                                    id[279->284, "Book1"]
                                dot[284->285, "."]
                                id[285->292, "book_id"]
                            assignment_operator[293->294]
                              =[293->294, "="]
                            assignment_exp[295->302]
                              conditional_exp[295->302]
                                logical_or_exp[295->302]
                                  logical_and_exp[295->302]
                                    inclusive_or_exp[295->302]
                                      exclusive_or_exp[295->302]
                                        and_exp[295->302]
                                          equality_exp[295->302]
                                            relational_exp[295->302]
                                              shift_expression[295->302]
                                                additive_exp[295->302]
                                                  mult_exp[295->302]
                                                    cast_exp[295->302]
                                                      unary_exp[295->302]
                                                        postfix_exp[295->302]
                                                          primary_exp[295->302]
                                                            cconst[295->302]
                                                              int_const[295->302, "6495407"]
                      ;[302->303, ";"]
              block_item[308->317]
                stat[308->317]
                  jump_stat[308->317]
                    return[308->314, "return"]
                    exp[315->316]
                      assignment_exp[315->316]
                        conditional_exp[315->316]
                          logical_or_exp[315->316]
                            logical_and_exp[315->316]
                              inclusive_or_exp[315->316]
                                exclusive_or_exp[315->316]
                                  and_exp[315->316]
                                    equality_exp[315->316]
                                      relational_exp[315->316]
                                        shift_expression[315->316]
                                          additive_exp[315->316]
                                            mult_exp[315->316]
                                              cast_exp[315->316]
                                                unary_exp[315->316]
                                                  postfix_exp[315->316]
                                                    primary_exp[315->316]
                                                      cconst[315->316]
                                                        int_const[315->316, "0"]
                    ;[316->317, ";"]
          }[318->319, "}"]