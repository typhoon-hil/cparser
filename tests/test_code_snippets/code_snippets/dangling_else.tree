translation_unit[0->231]
  external_decl_1[0->231]
    external_decl[0->231]
      function_definition[0->231]
        decl_specs[0->3]
          decl_specs_g1_1[0->3]
            decl_specs_g1[0->3]
              type_spec[0->3]
                int[0->3, "int"]
        declarator[4->37]
          pointer_opt[4->4]
          direct_declarator[4->37]
            direct_declarator[4->8]
              id[4->8, "main"]
            ([8->9, "("]
            param_type_list[9->36]
              param_decl_1_comma[9->36]
                param_decl_1_comma[9->17]
                  param_decl[9->17]
                    decl_specs[9->12]
                      decl_specs_g1_1[9->12]
                        decl_specs_g1[9->12]
                          type_spec[9->12]
                            int[9->12, "int"]
                    param_decl_g1_opt[13->17]
                      param_decl_g1[13->17]
                        declarator[13->17]
                          pointer_opt[13->13]
                          direct_declarator[13->17]
                            id[13->17, "argc"]
                comma[17->18, ","]
                param_decl[19->36]
                  decl_specs[19->29]
                    decl_specs_g1_1[19->29]
                      decl_specs_g1_1[19->24]
                        decl_specs_g1[19->24]
                          type_qualifier[19->24]
                            const[19->24, "const"]
                      decl_specs_g1[25->29]
                        type_spec[25->29]
                          char[25->29, "char"]
                  param_decl_g1_opt[30->36]
                    param_decl_g1[30->36]
                      declarator[30->36]
                        pointer_opt[30->32]
                          pointer[30->32]
                            *[30->31, "*"]
                            type_qualifier_0[31->31]
                            pointer_opt[31->32]
                              pointer[31->32]
                                *[31->32, "*"]
                                type_qualifier_0[32->32]
                                pointer_opt[32->32]
                        direct_declarator[32->36]
                          id[32->36, "argv"]
              param_type_list_g1_opt[36->36]
            )[36->37, ")"]
        compound_stat[37->231]
          {[37->38, "{"]
          block_item_0[43->229]
            block_item_1[43->229]
              block_item_1[43->215]
                block_item_1[43->94]
                  block_item_1[43->83]
                    block_item_1[43->68]
                      block_item_1[43->53]
                        block_item[43->53]
                          decl[43->53]
                            decl_body[43->52]
                              decl_specs[43->46]
                                decl_specs_g1_1[43->46]
                                  decl_specs_g1[43->46]
                                    type_spec[43->46]
                                      int[43->46, "int"]
                              init_declarator_list_opt[47->52]
                                init_declarator_list[47->52]
                                  init_declarator_1_comma[47->52]
                                    init_declarator[47->52]
                                      declarator[47->48]
                                        pointer_opt[47->47]
                                        direct_declarator[47->48]
                                          id[47->48, "a"]
                                      =[49->50, "="]
                                      initializer[51->52]
                                        assignment_exp[51->52]
                                          conditional_exp[51->52]
                                            logical_or_exp[51->52]
                                              logical_and_exp[51->52]
                                                inclusive_or_exp[51->52]
                                                  exclusive_or_exp[51->52]
                                                    and_exp[51->52]
                                                      equality_exp[51->52]
                                                        relational_exp[51->52]
                                                          shift_expression[51->52]
                                                            additive_exp[51->52]
                                                              mult_exp[51->52]
                                                                cast_exp[51->52]
                                                                  unary_exp[51->52]
                                                                    postfix_exp[51->52]
                                                                      primary_exp[51->52]
                                                                        cconst[51->52]
                                                                          int_const[51->52, "1"]
                            ;[52->53, ";"]
                      block_item[58->68]
                        decl[58->68]
                          decl_body[58->67]
                            decl_specs[58->61]
                              decl_specs_g1_1[58->61]
                                decl_specs_g1[58->61]
                                  type_spec[58->61]
                                    int[58->61, "int"]
                            init_declarator_list_opt[62->67]
                              init_declarator_list[62->67]
                                init_declarator_1_comma[62->67]
                                  init_declarator[62->67]
                                    declarator[62->63]
                                      pointer_opt[62->62]
                                      direct_declarator[62->63]
                                        id[62->63, "b"]
                                    =[64->65, "="]
                                    initializer[66->67]
                                      assignment_exp[66->67]
                                        conditional_exp[66->67]
                                          logical_or_exp[66->67]
                                            logical_and_exp[66->67]
                                              inclusive_or_exp[66->67]
                                                exclusive_or_exp[66->67]
                                                  and_exp[66->67]
                                                    equality_exp[66->67]
                                                      relational_exp[66->67]
                                                        shift_expression[66->67]
                                                          additive_exp[66->67]
                                                            mult_exp[66->67]
                                                              cast_exp[66->67]
                                                                unary_exp[66->67]
                                                                  postfix_exp[66->67]
                                                                    primary_exp[66->67]
                                                                      cconst[66->67]
                                                                        int_const[66->67, "1"]
                          ;[67->68, ";"]
                    block_item[73->83]
                      decl[73->83]
                        decl_body[73->82]
                          decl_specs[73->76]
                            decl_specs_g1_1[73->76]
                              decl_specs_g1[73->76]
                                type_spec[73->76]
                                  int[73->76, "int"]
                          init_declarator_list_opt[77->82]
                            init_declarator_list[77->82]
                              init_declarator_1_comma[77->82]
                                init_declarator[77->82]
                                  declarator[77->78]
                                    pointer_opt[77->77]
                                    direct_declarator[77->78]
                                      id[77->78, "c"]
                                  =[79->80, "="]
                                  initializer[81->82]
                                    assignment_exp[81->82]
                                      conditional_exp[81->82]
                                        logical_or_exp[81->82]
                                          logical_and_exp[81->82]
                                            inclusive_or_exp[81->82]
                                              exclusive_or_exp[81->82]
                                                and_exp[81->82]
                                                  equality_exp[81->82]
                                                    relational_exp[81->82]
                                                      shift_expression[81->82]
                                                        additive_exp[81->82]
                                                          mult_exp[81->82]
                                                            cast_exp[81->82]
                                                              unary_exp[81->82]
                                                                postfix_exp[81->82]
                                                                  primary_exp[81->82]
                                                                    cconst[81->82]
                                                                      int_const[81->82, "2"]
                        ;[82->83, ";"]
                  block_item[88->94]
                    decl[88->94]
                      decl_body[88->93]
                        decl_specs[88->91]
                          decl_specs_g1_1[88->91]
                            decl_specs_g1[88->91]
                              type_spec[88->91]
                                int[88->91, "int"]
                        init_declarator_list_opt[92->93]
                          init_declarator_list[92->93]
                            init_declarator_1_comma[92->93]
                              init_declarator[92->93]
                                declarator[92->93]
                                  pointer_opt[92->92]
                                  direct_declarator[92->93]
                                    id[92->93, "d"]
                      ;[93->94, ";"]
                block_item[100->215]
                  stat[100->215]
                    selection_stat[100->215]
                      if[100->102, "if"]
                      ([102->103, "("]
                      exp[103->110]
                        assignment_exp[103->110]
                          conditional_exp[103->110]
                            logical_or_exp[103->110]
                              logical_and_exp[103->110]
                                inclusive_or_exp[103->110]
                                  exclusive_or_exp[103->110]
                                    and_exp[103->110]
                                      equality_exp[103->110]
                                        relational_exp[103->110]
                                          relational_exp[103->104]
                                            shift_expression[103->104]
                                              additive_exp[103->104]
                                                mult_exp[103->104]
                                                  cast_exp[103->104]
                                                    unary_exp[103->104]
                                                      postfix_exp[103->104]
                                                        primary_exp[103->104]
                                                          id[103->104, "a"]
                                          >[105->106, ">"]
                                          shift_expression[107->110]
                                            additive_exp[107->110]
                                              mult_exp[107->110]
                                                cast_exp[107->110]
                                                  unary_exp[107->110]
                                                    postfix_exp[107->110]
                                                      primary_exp[107->110]
                                                        cconst[107->110]
                                                          float_const[107->110, "0.5"]
                      )[110->111, ")"]
                      stat[120->215]
                        selection_stat[120->215]
                          if[120->122, "if"]
                          ([122->123, "("]
                          exp[123->128]
                            assignment_exp[123->128]
                              conditional_exp[123->128]
                                logical_or_exp[123->128]
                                  logical_and_exp[123->128]
                                    inclusive_or_exp[123->128]
                                      exclusive_or_exp[123->128]
                                        and_exp[123->128]
                                          equality_exp[123->128]
                                            relational_exp[123->128]
                                              relational_exp[123->124]
                                                shift_expression[123->124]
                                                  additive_exp[123->124]
                                                    mult_exp[123->124]
                                                      cast_exp[123->124]
                                                        unary_exp[123->124]
                                                          postfix_exp[123->124]
                                                            primary_exp[123->124]
                                                              id[123->124, "b"]
                                              <[125->126, "<"]
                                              shift_expression[127->128]
                                                additive_exp[127->128]
                                                  mult_exp[127->128]
                                                    cast_exp[127->128]
                                                      unary_exp[127->128]
                                                        postfix_exp[127->128]
                                                          primary_exp[127->128]
                                                            cconst[127->128]
                                                              int_const[127->128, "2"]
                          )[128->129, ")"]
                          stat[142->215]
                            selection_stat[142->215]
                              if[142->144, "if"]
                              ([145->146, "("]
                              exp[146->151]
                                assignment_exp[146->151]
                                  conditional_exp[146->151]
                                    logical_or_exp[146->151]
                                      logical_and_exp[146->151]
                                        inclusive_or_exp[146->151]
                                          exclusive_or_exp[146->151]
                                            and_exp[146->151]
                                              equality_exp[146->151]
                                                relational_exp[146->151]
                                                  relational_exp[146->147]
                                                    shift_expression[146->147]
                                                      additive_exp[146->147]
                                                        mult_exp[146->147]
                                                          cast_exp[146->147]
                                                            unary_exp[146->147]
                                                              postfix_exp[146->147]
                                                                primary_exp[146->147]
                                                                  id[146->147, "c"]
                                                  <[148->149, "<"]
                                                  shift_expression[150->151]
                                                    additive_exp[150->151]
                                                      mult_exp[150->151]
                                                        cast_exp[150->151]
                                                          unary_exp[150->151]
                                                            postfix_exp[150->151]
                                                              primary_exp[150->151]
                                                                cconst[150->151]
                                                                  int_const[150->151, "3"]
                              )[151->152, ")"]
                              stat[169->175]
                                exp_stat[169->175]
                                  exp_opt[169->174]
                                    exp[169->174]
                                      assignment_exp[169->174]
                                        unary_exp[169->170]
                                          postfix_exp[169->170]
                                            primary_exp[169->170]
                                              id[169->170, "d"]
                                        assignment_operator[171->172]
                                          =[171->172, "="]
                                        assignment_exp[173->174]
                                          conditional_exp[173->174]
                                            logical_or_exp[173->174]
                                              logical_and_exp[173->174]
                                                inclusive_or_exp[173->174]
                                                  exclusive_or_exp[173->174]
                                                    and_exp[173->174]
                                                      equality_exp[173->174]
                                                        relational_exp[173->174]
                                                          shift_expression[173->174]
                                                            additive_exp[173->174]
                                                              mult_exp[173->174]
                                                                cast_exp[173->174]
                                                                  unary_exp[173->174]
                                                                    postfix_exp[173->174]
                                                                      primary_exp[173->174]
                                                                        cconst[173->174]
                                                                          int_const[173->174, "1"]
                                  ;[174->175, ";"]
                              else[188->192, "else"]
                              stat[209->215]
                                exp_stat[209->215]
                                  exp_opt[209->214]
                                    exp[209->214]
                                      assignment_exp[209->214]
                                        unary_exp[209->210]
                                          postfix_exp[209->210]
                                            primary_exp[209->210]
                                              id[209->210, "d"]
                                        assignment_operator[211->212]
                                          =[211->212, "="]
                                        assignment_exp[213->214]
                                          conditional_exp[213->214]
                                            logical_or_exp[213->214]
                                              logical_and_exp[213->214]
                                                inclusive_or_exp[213->214]
                                                  exclusive_or_exp[213->214]
                                                    and_exp[213->214]
                                                      equality_exp[213->214]
                                                        relational_exp[213->214]
                                                          shift_expression[213->214]
                                                            additive_exp[213->214]
                                                              mult_exp[213->214]
                                                                cast_exp[213->214]
                                                                  unary_exp[213->214]
                                                                    postfix_exp[213->214]
                                                                      primary_exp[213->214]
                                                                        cconst[213->214]
                                                                          int_const[213->214, "3"]
                                  ;[214->215, ";"]
              block_item[220->229]
                stat[220->229]
                  jump_stat[220->229]
                    return[220->226, "return"]
                    exp[227->228]
                      assignment_exp[227->228]
                        conditional_exp[227->228]
                          logical_or_exp[227->228]
                            logical_and_exp[227->228]
                              inclusive_or_exp[227->228]
                                exclusive_or_exp[227->228]
                                  and_exp[227->228]
                                    equality_exp[227->228]
                                      relational_exp[227->228]
                                        shift_expression[227->228]
                                          additive_exp[227->228]
                                            mult_exp[227->228]
                                              cast_exp[227->228]
                                                unary_exp[227->228]
                                                  postfix_exp[227->228]
                                                    primary_exp[227->228]
                                                      cconst[227->228]
                                                        int_const[227->228, "0"]
                    ;[228->229, ";"]
          }[230->231, "}"]