translation_unit[5->41]
  external_decl_1[5->41]
    external_decl_1[5->23]
      external_decl[5->23]
        decl[5->23]
          decl_body[5->22]
            decl_specs[5->22]
              decl_specs_g1_1[5->22]
                decl_specs_g1_1[5->16]
                  decl_specs_g1_1[5->12]
                    decl_specs_g1[5->12]
                      storage_class_spec[5->12]
                        typedef[5->12, "typedef"]
                  decl_specs_g1[13->16]
                    type_spec[13->16]
                      int[13->16, "int"]
                decl_specs_g1[17->22]
                  type_spec[17->22]
                    typedef_name[17->22]
                      id[17->22, "INT_T"]
            init_declarator_list_opt[22->22]
          ;[22->23, ";"]
    external_decl[29->41]
      decl[29->41]
        decl_body[29->40]
          decl_specs[29->34]
            decl_specs_g1_1[29->34]
              decl_specs_g1[29->34]
                type_spec[29->34]
                  typedef_name[29->34]
                    id[29->34, "INT_T"]
          init_declarator_list_opt[35->40]
            init_declarator_list[35->40]
              init_declarator_1_comma[35->40]
                init_declarator[35->40]
                  declarator[35->36]
                    pointer_opt[35->35]
                    direct_declarator[35->36]
                      id[35->36, "a"]
                  =[37->38, "="]
                  initializer[39->40]
                    assignment_exp[39->40]
                      conditional_exp[39->40]
                        logical_or_exp[39->40]
                          logical_and_exp[39->40]
                            inclusive_or_exp[39->40]
                              exclusive_or_exp[39->40]
                                and_exp[39->40]
                                  equality_exp[39->40]
                                    relational_exp[39->40]
                                      shift_expression[39->40]
                                        additive_exp[39->40]
                                          mult_exp[39->40]
                                            cast_exp[39->40]
                                              unary_exp[39->40]
                                                postfix_exp[39->40]
                                                  primary_exp[39->40]
                                                    cconst[39->40]
                                                      int_const[39->40, "0"]
        ;[40->41, ";"]